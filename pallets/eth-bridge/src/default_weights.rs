// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_eth_bridge
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-04-10, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-15-201`, CPU: `AMD EPYC 7R32`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./avn-parachain-collator
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --template
// frame-weight-template.hbs
// --pallet
// pallet_eth_bridge
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// default_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_eth_bridge.
pub trait WeightInfo {
	fn set_eth_tx_lifetime_secs() -> Weight;
	fn set_eth_tx_id() -> Weight;
	fn add_confirmation(v: u32, ) -> Weight;
	fn add_eth_tx_hash() -> Weight;
	fn add_corroboration() -> Weight;
	fn add_corroboration_with_challenge() -> Weight;
	fn remove_active_request() -> Weight;
}

/// Weights for pallet_eth_bridge using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: EthBridge EthTxLifetimeSecs (r:0 w:1)
	fn set_eth_tx_lifetime_secs() -> Weight {
		Weight::from_ref_time(16_900_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: EthBridge NextTxId (r:0 w:1)
	fn set_eth_tx_id() -> Weight {
		Weight::from_ref_time(16_131_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: EthBridge ActiveRequest (r:1 w:1)
	// Storage: Avn Validators (r:1 w:0)
	// Storage: ValidatorsManager EthereumPublicKeys (r:1 w:0)
	/// The range of component `v` is `[2, 100]`.
	fn add_confirmation(v: u32, ) -> Weight {
		Weight::from_ref_time(67_269_144)
			// Standard Error: 9_958
			.saturating_add(Weight::from_ref_time(933_212).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: EthBridge ActiveRequest (r:1 w:1)
	fn add_eth_tx_hash() -> Weight {
		Weight::from_ref_time(26_661_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: EthBridge ActiveRequest (r:1 w:1)
	// Storage: Avn Validators (r:1 w:0)
	fn add_corroboration() -> Weight {
		Weight::from_ref_time(31_471_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: EthBridge ActiveRequest (r:1 w:1)
	// Storage: Avn Validators (r:1 w:0)
	fn add_corroboration_with_challenge() -> Weight {
		Weight::from_ref_time(31_471_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: EthBridge ActiveRequest (r:1 w:1)
	// Storage: EthBridge RequestQueue (r:1 w:0)
	fn remove_active_request() -> Weight {
		Weight::from_ref_time(27_671_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: EthBridge EthTxLifetimeSecs (r:0 w:1)
	fn set_eth_tx_lifetime_secs() -> Weight {
		Weight::from_ref_time(16_900_000)
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: EthBridge NextTxId (r:0 w:1)
	fn set_eth_tx_id() -> Weight {
		Weight::from_ref_time(16_131_000)
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: EthBridge ActiveRequest (r:1 w:1)
	// Storage: Avn Validators (r:1 w:0)
	// Storage: ValidatorsManager EthereumPublicKeys (r:1 w:0)
	/// The range of component `v` is `[2, 100]`.
	fn add_confirmation(v: u32, ) -> Weight {
		Weight::from_ref_time(67_269_144)
			// Standard Error: 9_958
			.saturating_add(Weight::from_ref_time(933_212).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: EthBridge ActiveRequest (r:1 w:1)
	fn add_eth_tx_hash() -> Weight {
		Weight::from_ref_time(26_661_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: EthBridge ActiveRequest (r:1 w:1)
	// Storage: Avn Validators (r:1 w:0)
	fn add_corroboration() -> Weight {
		Weight::from_ref_time(31_471_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: EthBridge ActiveRequest (r:1 w:1)
	// Storage: Avn Validators (r:1 w:0)
	fn add_corroboration_with_challenge() -> Weight {
		Weight::from_ref_time(31_471_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: EthBridge ActiveRequest (r:1 w:1)
	// Storage: EthBridge RequestQueue (r:1 w:0)
	fn remove_active_request() -> Weight {
		Weight::from_ref_time(27_671_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}
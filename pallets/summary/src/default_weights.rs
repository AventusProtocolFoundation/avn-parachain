// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_summary
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-08, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-4-12`, CPU: `AMD EPYC 7R32`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./avn-parachain-collator
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --template
// .maintain/frame-weight-template.hbs
// --pallet
// pallet_summary
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// summary_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_summary.
pub trait WeightInfo {
	fn set_periods() -> Weight;
	fn record_summary_calculation(v: u32, r: u32, ) -> Weight;
	fn approve_root_with_end_voting(v: u32, o: u32, ) -> Weight;
	fn approve_root_without_end_voting(v: u32, ) -> Weight;
	fn reject_root_with_end_voting(v: u32, o: u32, ) -> Weight;
	fn reject_root_without_end_voting(v: u32, ) -> Weight;
	fn end_voting_period_with_rejected_valid_votes(o: u32, ) -> Weight;
	fn end_voting_period_with_approved_invalid_votes(o: u32, ) -> Weight;
	fn advance_slot_with_offence() -> Weight;
	fn advance_slot_without_offence() -> Weight;
	fn add_challenge() -> Weight;
}

/// Weights for pallet_summary using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Summary VotingPeriod (r:0 w:1)
	// Storage: Summary SchedulePeriod (r:0 w:1)
	fn set_periods() -> Weight {
		(16_781_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Summary TotalIngresses (r:1 w:1)
	// Storage: Avn Validators (r:1 w:0)
	// Storage: Summary NextBlockToProcess (r:1 w:0)
	// Storage: Summary SchedulePeriod (r:1 w:0)
	// Storage: Summary Roots (r:1 w:1)
	// Storage: Summary PendingApproval (r:1 w:1)
	// Storage: Summary VotesRepository (r:1 w:1)
	// Storage: Summary VotingPeriod (r:1 w:0)
	// Storage: EthereumTransactions ReservedTransactions (r:1 w:1)
	// Storage: EthereumTransactions Nonce (r:1 w:1)
	/// The range of component `v` is `[3, 10]`.
	/// The range of component `r` is `[1, 2]`.
	fn record_summary_calculation(v: u32, _r: u32, ) -> Weight {
		(62_440_000 as Weight)
			// Standard Error: 38_000
			.saturating_add((242_000 as Weight).saturating_mul(v as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: Summary Roots (r:1 w:1)
	// Storage: Avn Validators (r:1 w:0)
	// Storage: ValidatorsManager EthereumPublicKeys (r:1 w:0)
	// Storage: Summary VotesRepository (r:1 w:1)
	// Storage: Summary PendingApproval (r:1 w:1)
	// Storage: AvnFinalityTracker LatestFinalisedBlock (r:1 w:0)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Storage: Offences Reports (r:2 w:2)
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: AvnOffenceHandler ReportedOffenders (r:2 w:2)
	// Storage: AvnOffenceHandler SlashingEnabled (r:1 w:0)
	// Storage: Summary CurrentSlot (r:1 w:0)
	// Storage: Summary SlotOfLastPublishedSummary (r:0 w:1)
	// Storage: Summary NextBlockToProcess (r:0 w:1)
	/// The range of component `v` is `[3, 10]`.
	/// The range of component `o` is `[1, 2]`.
	fn approve_root_with_end_voting(v: u32, o: u32, ) -> Weight {
		(202_079_000 as Weight)
			// Standard Error: 268_000
			.saturating_add((1_240_000 as Weight).saturating_mul(v as Weight))
			// Standard Error: 2_224_000
			.saturating_add((19_374_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(o as Weight)))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(o as Weight)))
	}
	// Storage: Summary Roots (r:1 w:0)
	// Storage: Avn Validators (r:1 w:0)
	// Storage: ValidatorsManager EthereumPublicKeys (r:1 w:0)
	// Storage: Summary VotesRepository (r:1 w:1)
	// Storage: Summary PendingApproval (r:1 w:0)
	// Storage: AvnFinalityTracker LatestFinalisedBlock (r:1 w:0)
	/// The range of component `v` is `[3, 10]`.
	fn approve_root_without_end_voting(v: u32, ) -> Weight {
		(124_198_000 as Weight)
			// Standard Error: 67_000
			.saturating_add((508_000 as Weight).saturating_mul(v as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Avn Validators (r:1 w:0)
	// Storage: Summary VotesRepository (r:1 w:1)
	// Storage: Summary Roots (r:1 w:0)
	// Storage: Summary PendingApproval (r:1 w:1)
	// Storage: AvnFinalityTracker LatestFinalisedBlock (r:1 w:0)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Storage: Offences Reports (r:3 w:3)
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: AvnOffenceHandler ReportedOffenders (r:3 w:3)
	// Storage: AvnOffenceHandler SlashingEnabled (r:1 w:0)
	/// The range of component `v` is `[3, 10]`.
	/// The range of component `o` is `[1, 2]`.
	fn reject_root_with_end_voting(v: u32, o: u32, ) -> Weight {
		(146_663_000 as Weight)
			// Standard Error: 126_000
			.saturating_add((1_208_000 as Weight).saturating_mul(v as Weight))
			// Standard Error: 1_049_000
			.saturating_add((20_910_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(o as Weight)))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(o as Weight)))
	}
	// Storage: Avn Validators (r:1 w:0)
	// Storage: Summary VotesRepository (r:1 w:1)
	// Storage: Summary Roots (r:1 w:0)
	// Storage: Summary PendingApproval (r:1 w:0)
	// Storage: AvnFinalityTracker LatestFinalisedBlock (r:1 w:0)
	/// The range of component `v` is `[3, 10]`.
	fn reject_root_without_end_voting(v: u32, ) -> Weight {
		(53_317_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((146_000 as Weight).saturating_mul(v as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Summary VotesRepository (r:1 w:0)
	// Storage: Summary Roots (r:1 w:1)
	// Storage: Summary PendingApproval (r:1 w:1)
	// Storage: AvnFinalityTracker LatestFinalisedBlock (r:1 w:0)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Storage: Avn Validators (r:1 w:0)
	// Storage: Offences Reports (r:1 w:1)
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: AvnOffenceHandler ReportedOffenders (r:1 w:1)
	// Storage: AvnOffenceHandler SlashingEnabled (r:1 w:0)
	// Storage: Summary CurrentSlot (r:1 w:0)
	// Storage: Summary SlotOfLastPublishedSummary (r:0 w:1)
	// Storage: Summary NextBlockToProcess (r:0 w:1)
	/// The range of component `o` is `[1, 2]`.
	fn end_voting_period_with_rejected_valid_votes(o: u32, ) -> Weight {
		(92_154_000 as Weight)
			// Standard Error: 617_000
			.saturating_add((15_202_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(o as Weight)))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(o as Weight)))
	}
	// Storage: Summary VotesRepository (r:1 w:0)
	// Storage: Summary Roots (r:1 w:0)
	// Storage: Summary PendingApproval (r:1 w:1)
	// Storage: AvnFinalityTracker LatestFinalisedBlock (r:1 w:0)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Storage: Avn Validators (r:1 w:0)
	// Storage: Offences Reports (r:2 w:2)
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: AvnOffenceHandler ReportedOffenders (r:2 w:2)
	// Storage: AvnOffenceHandler SlashingEnabled (r:1 w:0)
	/// The range of component `o` is `[1, 2]`.
	fn end_voting_period_with_approved_invalid_votes(o: u32, ) -> Weight {
		(117_661_000 as Weight)
			// Standard Error: 1_307_000
			.saturating_add((17_536_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(o as Weight)))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(o as Weight)))
	}
	// Storage: Summary NextSlotAtBlock (r:1 w:1)
	// Storage: Summary CurrentSlotsValidator (r:1 w:1)
	// Storage: Summary SlotOfLastPublishedSummary (r:1 w:0)
	// Storage: Summary CurrentSlot (r:1 w:1)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Storage: Avn Validators (r:1 w:0)
	// Storage: Offences Reports (r:1 w:1)
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: AvnOffenceHandler ReportedOffenders (r:1 w:1)
	// Storage: AvnOffenceHandler SlashingEnabled (r:1 w:0)
	// Storage: Summary SchedulePeriod (r:1 w:0)
	fn advance_slot_with_offence() -> Weight {
		(93_875_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(12 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: Summary NextSlotAtBlock (r:1 w:1)
	// Storage: Summary CurrentSlotsValidator (r:1 w:1)
	// Storage: Summary SlotOfLastPublishedSummary (r:1 w:0)
	// Storage: Summary CurrentSlot (r:1 w:1)
	// Storage: Avn Validators (r:1 w:0)
	// Storage: Summary SchedulePeriod (r:1 w:0)
	fn advance_slot_without_offence() -> Weight {
		(38_122_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Summary CurrentSlot (r:1 w:1)
	// Storage: Summary CurrentSlotsValidator (r:1 w:1)
	// Storage: Summary NextSlotAtBlock (r:1 w:1)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Storage: Avn Validators (r:1 w:0)
	// Storage: Offences Reports (r:1 w:1)
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: AvnOffenceHandler ReportedOffenders (r:1 w:1)
	// Storage: AvnOffenceHandler SlashingEnabled (r:1 w:0)
	// Storage: Summary SlotOfLastPublishedSummary (r:1 w:0)
	// Storage: Summary SchedulePeriod (r:1 w:0)
	fn add_challenge() -> Weight {
		(103_435_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(12 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Summary VotingPeriod (r:0 w:1)
	// Storage: Summary SchedulePeriod (r:0 w:1)
	fn set_periods() -> Weight {
		(16_781_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Summary TotalIngresses (r:1 w:1)
	// Storage: Avn Validators (r:1 w:0)
	// Storage: Summary NextBlockToProcess (r:1 w:0)
	// Storage: Summary SchedulePeriod (r:1 w:0)
	// Storage: Summary Roots (r:1 w:1)
	// Storage: Summary PendingApproval (r:1 w:1)
	// Storage: Summary VotesRepository (r:1 w:1)
	// Storage: Summary VotingPeriod (r:1 w:0)
	// Storage: EthereumTransactions ReservedTransactions (r:1 w:1)
	// Storage: EthereumTransactions Nonce (r:1 w:1)
	/// The range of component `v` is `[3, 10]`.
	/// The range of component `r` is `[1, 2]`.
	fn record_summary_calculation(v: u32, _r: u32, ) -> Weight {
		(62_440_000 as Weight)
			// Standard Error: 38_000
			.saturating_add((242_000 as Weight).saturating_mul(v as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	// Storage: Summary Roots (r:1 w:1)
	// Storage: Avn Validators (r:1 w:0)
	// Storage: ValidatorsManager EthereumPublicKeys (r:1 w:0)
	// Storage: Summary VotesRepository (r:1 w:1)
	// Storage: Summary PendingApproval (r:1 w:1)
	// Storage: AvnFinalityTracker LatestFinalisedBlock (r:1 w:0)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Storage: Offences Reports (r:2 w:2)
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: AvnOffenceHandler ReportedOffenders (r:2 w:2)
	// Storage: AvnOffenceHandler SlashingEnabled (r:1 w:0)
	// Storage: Summary CurrentSlot (r:1 w:0)
	// Storage: Summary SlotOfLastPublishedSummary (r:0 w:1)
	// Storage: Summary NextBlockToProcess (r:0 w:1)
	/// The range of component `v` is `[3, 10]`.
	/// The range of component `o` is `[1, 2]`.
	fn approve_root_with_end_voting(v: u32, o: u32, ) -> Weight {
		(202_079_000 as Weight)
			// Standard Error: 268_000
			.saturating_add((1_240_000 as Weight).saturating_mul(v as Weight))
			// Standard Error: 2_224_000
			.saturating_add((19_374_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(o as Weight)))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes((2 as Weight).saturating_mul(o as Weight)))
	}
	// Storage: Summary Roots (r:1 w:0)
	// Storage: Avn Validators (r:1 w:0)
	// Storage: ValidatorsManager EthereumPublicKeys (r:1 w:0)
	// Storage: Summary VotesRepository (r:1 w:1)
	// Storage: Summary PendingApproval (r:1 w:0)
	// Storage: AvnFinalityTracker LatestFinalisedBlock (r:1 w:0)
	/// The range of component `v` is `[3, 10]`.
	fn approve_root_without_end_voting(v: u32, ) -> Weight {
		(124_198_000 as Weight)
			// Standard Error: 67_000
			.saturating_add((508_000 as Weight).saturating_mul(v as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Avn Validators (r:1 w:0)
	// Storage: Summary VotesRepository (r:1 w:1)
	// Storage: Summary Roots (r:1 w:0)
	// Storage: Summary PendingApproval (r:1 w:1)
	// Storage: AvnFinalityTracker LatestFinalisedBlock (r:1 w:0)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Storage: Offences Reports (r:3 w:3)
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: AvnOffenceHandler ReportedOffenders (r:3 w:3)
	// Storage: AvnOffenceHandler SlashingEnabled (r:1 w:0)
	/// The range of component `v` is `[3, 10]`.
	/// The range of component `o` is `[1, 2]`.
	fn reject_root_with_end_voting(v: u32, o: u32, ) -> Weight {
		(146_663_000 as Weight)
			// Standard Error: 126_000
			.saturating_add((1_208_000 as Weight).saturating_mul(v as Weight))
			// Standard Error: 1_049_000
			.saturating_add((20_910_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(o as Weight)))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes((2 as Weight).saturating_mul(o as Weight)))
	}
	// Storage: Avn Validators (r:1 w:0)
	// Storage: Summary VotesRepository (r:1 w:1)
	// Storage: Summary Roots (r:1 w:0)
	// Storage: Summary PendingApproval (r:1 w:0)
	// Storage: AvnFinalityTracker LatestFinalisedBlock (r:1 w:0)
	/// The range of component `v` is `[3, 10]`.
	fn reject_root_without_end_voting(v: u32, ) -> Weight {
		(53_317_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((146_000 as Weight).saturating_mul(v as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Summary VotesRepository (r:1 w:0)
	// Storage: Summary Roots (r:1 w:1)
	// Storage: Summary PendingApproval (r:1 w:1)
	// Storage: AvnFinalityTracker LatestFinalisedBlock (r:1 w:0)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Storage: Avn Validators (r:1 w:0)
	// Storage: Offences Reports (r:1 w:1)
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: AvnOffenceHandler ReportedOffenders (r:1 w:1)
	// Storage: AvnOffenceHandler SlashingEnabled (r:1 w:0)
	// Storage: Summary CurrentSlot (r:1 w:0)
	// Storage: Summary SlotOfLastPublishedSummary (r:0 w:1)
	// Storage: Summary NextBlockToProcess (r:0 w:1)
	/// The range of component `o` is `[1, 2]`.
	fn end_voting_period_with_rejected_valid_votes(o: u32, ) -> Weight {
		(92_154_000 as Weight)
			// Standard Error: 617_000
			.saturating_add((15_202_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(o as Weight)))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes((2 as Weight).saturating_mul(o as Weight)))
	}
	// Storage: Summary VotesRepository (r:1 w:0)
	// Storage: Summary Roots (r:1 w:0)
	// Storage: Summary PendingApproval (r:1 w:1)
	// Storage: AvnFinalityTracker LatestFinalisedBlock (r:1 w:0)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Storage: Avn Validators (r:1 w:0)
	// Storage: Offences Reports (r:2 w:2)
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: AvnOffenceHandler ReportedOffenders (r:2 w:2)
	// Storage: AvnOffenceHandler SlashingEnabled (r:1 w:0)
	/// The range of component `o` is `[1, 2]`.
	fn end_voting_period_with_approved_invalid_votes(o: u32, ) -> Weight {
		(117_661_000 as Weight)
			// Standard Error: 1_307_000
			.saturating_add((17_536_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(o as Weight)))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes((2 as Weight).saturating_mul(o as Weight)))
	}
	// Storage: Summary NextSlotAtBlock (r:1 w:1)
	// Storage: Summary CurrentSlotsValidator (r:1 w:1)
	// Storage: Summary SlotOfLastPublishedSummary (r:1 w:0)
	// Storage: Summary CurrentSlot (r:1 w:1)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Storage: Avn Validators (r:1 w:0)
	// Storage: Offences Reports (r:1 w:1)
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: AvnOffenceHandler ReportedOffenders (r:1 w:1)
	// Storage: AvnOffenceHandler SlashingEnabled (r:1 w:0)
	// Storage: Summary SchedulePeriod (r:1 w:0)
	fn advance_slot_with_offence() -> Weight {
		(93_875_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(12 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
	// Storage: Summary NextSlotAtBlock (r:1 w:1)
	// Storage: Summary CurrentSlotsValidator (r:1 w:1)
	// Storage: Summary SlotOfLastPublishedSummary (r:1 w:0)
	// Storage: Summary CurrentSlot (r:1 w:1)
	// Storage: Avn Validators (r:1 w:0)
	// Storage: Summary SchedulePeriod (r:1 w:0)
	fn advance_slot_without_offence() -> Weight {
		(38_122_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Summary CurrentSlot (r:1 w:1)
	// Storage: Summary CurrentSlotsValidator (r:1 w:1)
	// Storage: Summary NextSlotAtBlock (r:1 w:1)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Storage: Avn Validators (r:1 w:0)
	// Storage: Offences Reports (r:1 w:1)
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: AvnOffenceHandler ReportedOffenders (r:1 w:1)
	// Storage: AvnOffenceHandler SlashingEnabled (r:1 w:0)
	// Storage: Summary SlotOfLastPublishedSummary (r:1 w:0)
	// Storage: Summary SchedulePeriod (r:1 w:0)
	fn add_challenge() -> Weight {
		(103_435_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(12 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
}

//! Autogenerated weights for pallet_ethereum_events
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-03-04, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-2-121`, CPU: `AMD EPYC 7R32`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./avn-parachain-collator
// benchmark
// pallet
// --chain
// dev
// --wasm-execution=compiled
// --template
// frame-weight-template.hbs
// --pallet
// pallet_ethereum_events
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ethereum_events_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_ethereum_events.
pub trait WeightInfo {
	fn add_validator_log(u: u32, e: u32, ) -> Weight;
	fn add_lift_log(u: u32, e: u32, ) -> Weight;
	fn add_ethereum_log(u: u32, e: u32, ) -> Weight;
	fn signed_add_ethereum_log(u: u32, e: u32, ) -> Weight;
	fn set_nft_contract_map_storage() -> Weight;
	fn submit_checkevent_result(v: u32, u: u32, ) -> Weight;
	fn process_event_with_successful_challenge(v: u32, e: u32, ) -> Weight;
	fn process_event_without_successful_challenge(v: u32, e: u32, ) -> Weight;
	fn challenge_event(v: u32, e: u32, c: u32, ) -> Weight;
	fn set_event_challenge_period() -> Weight;
}

/// Weights for pallet_ethereum_events using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `EthereumEvents::ProcessedEvents` (r:1 w:0)
	/// Proof: `EthereumEvents::ProcessedEvents` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::UncheckedEvents` (r:1 w:1)
	/// Proof: `EthereumEvents::UncheckedEvents` (`max_values`: Some(1), `max_size`: Some(760002), added: 760497, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::EventsPendingChallenge` (r:1 w:0)
	/// Proof: `EthereumEvents::EventsPendingChallenge` (`max_values`: Some(1), `max_size`: Some(12481), added: 12976, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::TotalIngresses` (r:1 w:1)
	/// Proof: `EthereumEvents::TotalIngresses` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Avn::AvnBridgeContractAddress` (r:1 w:0)
	/// Proof: `Avn::AvnBridgeContractAddress` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[1, 9999]`.
	/// The range of component `e` is `[1, 9]`.
	fn add_validator_log(u: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `274 + e * (122 ±0) + u * (76 ±0)`
		//  Estimated: `761487`
		// Minimum execution time: 51_812_000 picoseconds.
		Weight::from_parts(42_291_445, 761487)
			// Standard Error: 76
			.saturating_add(Weight::from_parts(83_998, 0).saturating_mul(u.into()))
			// Standard Error: 88_448
			.saturating_add(Weight::from_parts(1_127_279, 0).saturating_mul(e.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `EthereumEvents::ProcessedEvents` (r:1 w:0)
	/// Proof: `EthereumEvents::ProcessedEvents` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::UncheckedEvents` (r:1 w:1)
	/// Proof: `EthereumEvents::UncheckedEvents` (`max_values`: Some(1), `max_size`: Some(760002), added: 760497, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::EventsPendingChallenge` (r:1 w:0)
	/// Proof: `EthereumEvents::EventsPendingChallenge` (`max_values`: Some(1), `max_size`: Some(12481), added: 12976, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::TotalIngresses` (r:1 w:1)
	/// Proof: `EthereumEvents::TotalIngresses` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Avn::AvnBridgeContractAddress` (r:1 w:0)
	/// Proof: `Avn::AvnBridgeContractAddress` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[1, 9999]`.
	/// The range of component `e` is `[1, 9]`.
	fn add_lift_log(u: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `274 + e * (122 ±0) + u * (76 ±0)`
		//  Estimated: `761487`
		// Minimum execution time: 52_111_000 picoseconds.
		Weight::from_parts(44_478_616, 761487)
			// Standard Error: 70
			.saturating_add(Weight::from_parts(83_760, 0).saturating_mul(u.into()))
			// Standard Error: 81_414
			.saturating_add(Weight::from_parts(784_558, 0).saturating_mul(e.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `EthereumEvents::ProcessedEvents` (r:1 w:0)
	/// Proof: `EthereumEvents::ProcessedEvents` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::UncheckedEvents` (r:1 w:1)
	/// Proof: `EthereumEvents::UncheckedEvents` (`max_values`: Some(1), `max_size`: Some(760002), added: 760497, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::EventsPendingChallenge` (r:1 w:0)
	/// Proof: `EthereumEvents::EventsPendingChallenge` (`max_values`: Some(1), `max_size`: Some(12481), added: 12976, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::TotalIngresses` (r:1 w:1)
	/// Proof: `EthereumEvents::TotalIngresses` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[1, 9999]`.
	/// The range of component `e` is `[1, 9]`.
	fn add_ethereum_log(u: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `154 + e * (122 ±0) + u * (76 ±0)`
		//  Estimated: `761487`
		// Minimum execution time: 45_792_000 picoseconds.
		Weight::from_parts(33_047_277, 761487)
			// Standard Error: 90
			.saturating_add(Weight::from_parts(84_341, 0).saturating_mul(u.into()))
			// Standard Error: 105_337
			.saturating_add(Weight::from_parts(1_168_386, 0).saturating_mul(e.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `EthereumEvents::ProxyNonces` (r:1 w:1)
	/// Proof: `EthereumEvents::ProxyNonces` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::ProcessedEvents` (r:1 w:0)
	/// Proof: `EthereumEvents::ProcessedEvents` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::UncheckedEvents` (r:1 w:1)
	/// Proof: `EthereumEvents::UncheckedEvents` (`max_values`: Some(1), `max_size`: Some(760002), added: 760497, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::EventsPendingChallenge` (r:1 w:0)
	/// Proof: `EthereumEvents::EventsPendingChallenge` (`max_values`: Some(1), `max_size`: Some(12481), added: 12976, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::TotalIngresses` (r:1 w:1)
	/// Proof: `EthereumEvents::TotalIngresses` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[1, 9999]`.
	/// The range of component `e` is `[1, 9]`.
	fn signed_add_ethereum_log(u: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `154 + e * (122 ±0) + u * (76 ±0)`
		//  Estimated: `761487`
		// Minimum execution time: 200_695_000 picoseconds.
		Weight::from_parts(194_375_438, 761487)
			// Standard Error: 75
			.saturating_add(Weight::from_parts(84_054, 0).saturating_mul(u.into()))
			// Standard Error: 87_687
			.saturating_add(Weight::from_parts(921_503, 0).saturating_mul(e.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `EthereumEvents::NftT1Contracts` (r:0 w:1)
	/// Proof: `EthereumEvents::NftT1Contracts` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	fn set_nft_contract_map_storage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_841_000 picoseconds.
		Weight::from_parts(8_160_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Avn::Validators` (r:1 w:0)
	/// Proof: `Avn::Validators` (`max_values`: Some(1), `max_size`: Some(16386), added: 16881, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::UncheckedEvents` (r:1 w:1)
	/// Proof: `EthereumEvents::UncheckedEvents` (`max_values`: Some(1), `max_size`: Some(760002), added: 760497, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::EventChallengePeriod` (r:1 w:0)
	/// Proof: `EthereumEvents::EventChallengePeriod` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::QuorumFactor` (r:1 w:0)
	/// Proof: `EthereumEvents::QuorumFactor` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::EventsPendingChallenge` (r:1 w:1)
	/// Proof: `EthereumEvents::EventsPendingChallenge` (`max_values`: Some(1), `max_size`: Some(12481), added: 12976, mode: `MaxEncodedLen`)
	/// The range of component `v` is `[1, 10]`.
	/// The range of component `u` is `[1, 9999]`.
	fn submit_checkevent_result(v: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `323 + u * (76 ±0) + v * (64 ±0)`
		//  Estimated: `761487`
		// Minimum execution time: 53_602_000 picoseconds.
		Weight::from_parts(35_227_924, 761487)
			// Standard Error: 434_634
			.saturating_add(Weight::from_parts(666_891, 0).saturating_mul(v.into()))
			// Standard Error: 415
			.saturating_add(Weight::from_parts(572_377, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Avn::Validators` (r:1 w:0)
	/// Proof: `Avn::Validators` (`max_values`: Some(1), `max_size`: Some(16386), added: 16881, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::EventsPendingChallenge` (r:1 w:1)
	/// Proof: `EthereumEvents::EventsPendingChallenge` (`max_values`: Some(1), `max_size`: Some(12481), added: 12976, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::QuorumFactor` (r:1 w:0)
	/// Proof: `EthereumEvents::QuorumFactor` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::Challenges` (r:1 w:0)
	/// Proof: `EthereumEvents::Challenges` (`max_values`: None, `max_size`: Some(401), added: 2876, mode: `MaxEncodedLen`)
	/// Storage: `Session::CurrentIndex` (r:1 w:0)
	/// Proof: `Session::CurrentIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Offences::Reports` (r:1 w:1)
	/// Proof: `Offences::Reports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Offences::ConcurrentReportsIndex` (r:1 w:1)
	/// Proof: `Offences::ConcurrentReportsIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AvnOffenceHandler::ReportedOffenders` (r:1 w:1)
	/// Proof: `AvnOffenceHandler::ReportedOffenders` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `AvnOffenceHandler::SlashingEnabled` (r:1 w:0)
	/// Proof: `AvnOffenceHandler::SlashingEnabled` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::ProcessedEvents` (r:0 w:1)
	/// Proof: `EthereumEvents::ProcessedEvents` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
	/// The range of component `v` is `[1, 10]`.
	/// The range of component `e` is `[1, 9]`.
	fn process_event_with_successful_challenge(v: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1025 + e * (122 ±0) + v * (74 ±0)`
		//  Estimated: `17871 + e * (122 ±0) + v * (75 ±0)`
		// Minimum execution time: 149_354_000 picoseconds.
		Weight::from_parts(149_255_878, 17871)
			// Standard Error: 19_873
			.saturating_add(Weight::from_parts(266_665, 0).saturating_mul(v.into()))
			// Standard Error: 22_062
			.saturating_add(Weight::from_parts(1_334_863, 0).saturating_mul(e.into()))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(Weight::from_parts(0, 122).saturating_mul(e.into()))
			.saturating_add(Weight::from_parts(0, 75).saturating_mul(v.into()))
	}
	/// Storage: `Avn::Validators` (r:1 w:0)
	/// Proof: `Avn::Validators` (`max_values`: Some(1), `max_size`: Some(16386), added: 16881, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::EventsPendingChallenge` (r:1 w:1)
	/// Proof: `EthereumEvents::EventsPendingChallenge` (`max_values`: Some(1), `max_size`: Some(12481), added: 12976, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::QuorumFactor` (r:1 w:0)
	/// Proof: `EthereumEvents::QuorumFactor` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::Challenges` (r:1 w:0)
	/// Proof: `EthereumEvents::Challenges` (`max_values`: None, `max_size`: Some(401), added: 2876, mode: `MaxEncodedLen`)
	/// Storage: `Session::CurrentIndex` (r:1 w:0)
	/// Proof: `Session::CurrentIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Offences::Reports` (r:1 w:1)
	/// Proof: `Offences::Reports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Offences::ConcurrentReportsIndex` (r:1 w:1)
	/// Proof: `Offences::ConcurrentReportsIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AvnOffenceHandler::ReportedOffenders` (r:1 w:1)
	/// Proof: `AvnOffenceHandler::ReportedOffenders` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `AvnOffenceHandler::SlashingEnabled` (r:1 w:0)
	/// Proof: `AvnOffenceHandler::SlashingEnabled` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::ProcessedEvents` (r:0 w:1)
	/// Proof: `EthereumEvents::ProcessedEvents` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
	/// The range of component `v` is `[1, 10]`.
	/// The range of component `e` is `[1, 9]`.
	fn process_event_without_successful_challenge(v: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1036 + e * (122 ±0) + v * (64 ±0)`
		//  Estimated: `17871 + e * (122 ±0) + v * (64 ±0)`
		// Minimum execution time: 144_034_000 picoseconds.
		Weight::from_parts(144_360_204, 17871)
			// Standard Error: 19_280
			.saturating_add(Weight::from_parts(306_943, 0).saturating_mul(v.into()))
			// Standard Error: 21_404
			.saturating_add(Weight::from_parts(1_387_237, 0).saturating_mul(e.into()))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(Weight::from_parts(0, 122).saturating_mul(e.into()))
			.saturating_add(Weight::from_parts(0, 64).saturating_mul(v.into()))
	}
	/// Storage: `Avn::Validators` (r:1 w:0)
	/// Proof: `Avn::Validators` (`max_values`: Some(1), `max_size`: Some(16386), added: 16881, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::EventsPendingChallenge` (r:1 w:0)
	/// Proof: `EthereumEvents::EventsPendingChallenge` (`max_values`: Some(1), `max_size`: Some(12481), added: 12976, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::Challenges` (r:1 w:1)
	/// Proof: `EthereumEvents::Challenges` (`max_values`: None, `max_size`: Some(401), added: 2876, mode: `MaxEncodedLen`)
	/// The range of component `v` is `[3, 10]`.
	/// The range of component `e` is `[1, 9]`.
	/// The range of component `c` is `[1, 9]`.
	fn challenge_event(v: u32, e: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `479 + c * (32 ±0) + e * (122 ±0) + v * (64 ±0)`
		//  Estimated: `17871`
		// Minimum execution time: 51_561_000 picoseconds.
		Weight::from_parts(51_764_683, 17871)
			// Standard Error: 5_257
			.saturating_add(Weight::from_parts(88_239, 0).saturating_mul(v.into()))
			// Standard Error: 4_578
			.saturating_add(Weight::from_parts(296_510, 0).saturating_mul(e.into()))
			// Standard Error: 4_578
			.saturating_add(Weight::from_parts(42_613, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `EthereumEvents::EventChallengePeriod` (r:0 w:1)
	/// Proof: `EthereumEvents::EventChallengePeriod` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_event_challenge_period() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 15_291_000 picoseconds.
		Weight::from_parts(16_001_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `EthereumEvents::ProcessedEvents` (r:1 w:0)
	/// Proof: `EthereumEvents::ProcessedEvents` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::UncheckedEvents` (r:1 w:1)
	/// Proof: `EthereumEvents::UncheckedEvents` (`max_values`: Some(1), `max_size`: Some(760002), added: 760497, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::EventsPendingChallenge` (r:1 w:0)
	/// Proof: `EthereumEvents::EventsPendingChallenge` (`max_values`: Some(1), `max_size`: Some(12481), added: 12976, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::TotalIngresses` (r:1 w:1)
	/// Proof: `EthereumEvents::TotalIngresses` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Avn::AvnBridgeContractAddress` (r:1 w:0)
	/// Proof: `Avn::AvnBridgeContractAddress` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[1, 9999]`.
	/// The range of component `e` is `[1, 9]`.
	fn add_validator_log(u: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `274 + e * (122 ±0) + u * (76 ±0)`
		//  Estimated: `761487`
		// Minimum execution time: 51_812_000 picoseconds.
		Weight::from_parts(42_291_445, 761487)
			// Standard Error: 76
			.saturating_add(Weight::from_parts(83_998, 0).saturating_mul(u.into()))
			// Standard Error: 88_448
			.saturating_add(Weight::from_parts(1_127_279, 0).saturating_mul(e.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `EthereumEvents::ProcessedEvents` (r:1 w:0)
	/// Proof: `EthereumEvents::ProcessedEvents` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::UncheckedEvents` (r:1 w:1)
	/// Proof: `EthereumEvents::UncheckedEvents` (`max_values`: Some(1), `max_size`: Some(760002), added: 760497, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::EventsPendingChallenge` (r:1 w:0)
	/// Proof: `EthereumEvents::EventsPendingChallenge` (`max_values`: Some(1), `max_size`: Some(12481), added: 12976, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::TotalIngresses` (r:1 w:1)
	/// Proof: `EthereumEvents::TotalIngresses` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Avn::AvnBridgeContractAddress` (r:1 w:0)
	/// Proof: `Avn::AvnBridgeContractAddress` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[1, 9999]`.
	/// The range of component `e` is `[1, 9]`.
	fn add_lift_log(u: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `274 + e * (122 ±0) + u * (76 ±0)`
		//  Estimated: `761487`
		// Minimum execution time: 52_111_000 picoseconds.
		Weight::from_parts(44_478_616, 761487)
			// Standard Error: 70
			.saturating_add(Weight::from_parts(83_760, 0).saturating_mul(u.into()))
			// Standard Error: 81_414
			.saturating_add(Weight::from_parts(784_558, 0).saturating_mul(e.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `EthereumEvents::ProcessedEvents` (r:1 w:0)
	/// Proof: `EthereumEvents::ProcessedEvents` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::UncheckedEvents` (r:1 w:1)
	/// Proof: `EthereumEvents::UncheckedEvents` (`max_values`: Some(1), `max_size`: Some(760002), added: 760497, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::EventsPendingChallenge` (r:1 w:0)
	/// Proof: `EthereumEvents::EventsPendingChallenge` (`max_values`: Some(1), `max_size`: Some(12481), added: 12976, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::TotalIngresses` (r:1 w:1)
	/// Proof: `EthereumEvents::TotalIngresses` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[1, 9999]`.
	/// The range of component `e` is `[1, 9]`.
	fn add_ethereum_log(u: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `154 + e * (122 ±0) + u * (76 ±0)`
		//  Estimated: `761487`
		// Minimum execution time: 45_792_000 picoseconds.
		Weight::from_parts(33_047_277, 761487)
			// Standard Error: 90
			.saturating_add(Weight::from_parts(84_341, 0).saturating_mul(u.into()))
			// Standard Error: 105_337
			.saturating_add(Weight::from_parts(1_168_386, 0).saturating_mul(e.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `EthereumEvents::ProxyNonces` (r:1 w:1)
	/// Proof: `EthereumEvents::ProxyNonces` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::ProcessedEvents` (r:1 w:0)
	/// Proof: `EthereumEvents::ProcessedEvents` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::UncheckedEvents` (r:1 w:1)
	/// Proof: `EthereumEvents::UncheckedEvents` (`max_values`: Some(1), `max_size`: Some(760002), added: 760497, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::EventsPendingChallenge` (r:1 w:0)
	/// Proof: `EthereumEvents::EventsPendingChallenge` (`max_values`: Some(1), `max_size`: Some(12481), added: 12976, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::TotalIngresses` (r:1 w:1)
	/// Proof: `EthereumEvents::TotalIngresses` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[1, 9999]`.
	/// The range of component `e` is `[1, 9]`.
	fn signed_add_ethereum_log(u: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `154 + e * (122 ±0) + u * (76 ±0)`
		//  Estimated: `761487`
		// Minimum execution time: 200_695_000 picoseconds.
		Weight::from_parts(194_375_438, 761487)
			// Standard Error: 75
			.saturating_add(Weight::from_parts(84_054, 0).saturating_mul(u.into()))
			// Standard Error: 87_687
			.saturating_add(Weight::from_parts(921_503, 0).saturating_mul(e.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `EthereumEvents::NftT1Contracts` (r:0 w:1)
	/// Proof: `EthereumEvents::NftT1Contracts` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	fn set_nft_contract_map_storage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_841_000 picoseconds.
		Weight::from_parts(8_160_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Avn::Validators` (r:1 w:0)
	/// Proof: `Avn::Validators` (`max_values`: Some(1), `max_size`: Some(16386), added: 16881, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::UncheckedEvents` (r:1 w:1)
	/// Proof: `EthereumEvents::UncheckedEvents` (`max_values`: Some(1), `max_size`: Some(760002), added: 760497, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::EventChallengePeriod` (r:1 w:0)
	/// Proof: `EthereumEvents::EventChallengePeriod` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::QuorumFactor` (r:1 w:0)
	/// Proof: `EthereumEvents::QuorumFactor` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::EventsPendingChallenge` (r:1 w:1)
	/// Proof: `EthereumEvents::EventsPendingChallenge` (`max_values`: Some(1), `max_size`: Some(12481), added: 12976, mode: `MaxEncodedLen`)
	/// The range of component `v` is `[1, 10]`.
	/// The range of component `u` is `[1, 9999]`.
	fn submit_checkevent_result(v: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `323 + u * (76 ±0) + v * (64 ±0)`
		//  Estimated: `761487`
		// Minimum execution time: 53_602_000 picoseconds.
		Weight::from_parts(35_227_924, 761487)
			// Standard Error: 434_634
			.saturating_add(Weight::from_parts(666_891, 0).saturating_mul(v.into()))
			// Standard Error: 415
			.saturating_add(Weight::from_parts(572_377, 0).saturating_mul(u.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Avn::Validators` (r:1 w:0)
	/// Proof: `Avn::Validators` (`max_values`: Some(1), `max_size`: Some(16386), added: 16881, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::EventsPendingChallenge` (r:1 w:1)
	/// Proof: `EthereumEvents::EventsPendingChallenge` (`max_values`: Some(1), `max_size`: Some(12481), added: 12976, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::QuorumFactor` (r:1 w:0)
	/// Proof: `EthereumEvents::QuorumFactor` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::Challenges` (r:1 w:0)
	/// Proof: `EthereumEvents::Challenges` (`max_values`: None, `max_size`: Some(401), added: 2876, mode: `MaxEncodedLen`)
	/// Storage: `Session::CurrentIndex` (r:1 w:0)
	/// Proof: `Session::CurrentIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Offences::Reports` (r:1 w:1)
	/// Proof: `Offences::Reports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Offences::ConcurrentReportsIndex` (r:1 w:1)
	/// Proof: `Offences::ConcurrentReportsIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AvnOffenceHandler::ReportedOffenders` (r:1 w:1)
	/// Proof: `AvnOffenceHandler::ReportedOffenders` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `AvnOffenceHandler::SlashingEnabled` (r:1 w:0)
	/// Proof: `AvnOffenceHandler::SlashingEnabled` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::ProcessedEvents` (r:0 w:1)
	/// Proof: `EthereumEvents::ProcessedEvents` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
	/// The range of component `v` is `[1, 10]`.
	/// The range of component `e` is `[1, 9]`.
	fn process_event_with_successful_challenge(v: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1025 + e * (122 ±0) + v * (74 ±0)`
		//  Estimated: `17871 + e * (122 ±0) + v * (75 ±0)`
		// Minimum execution time: 149_354_000 picoseconds.
		Weight::from_parts(149_255_878, 17871)
			// Standard Error: 19_873
			.saturating_add(Weight::from_parts(266_665, 0).saturating_mul(v.into()))
			// Standard Error: 22_062
			.saturating_add(Weight::from_parts(1_334_863, 0).saturating_mul(e.into()))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(Weight::from_parts(0, 122).saturating_mul(e.into()))
			.saturating_add(Weight::from_parts(0, 75).saturating_mul(v.into()))
	}
	/// Storage: `Avn::Validators` (r:1 w:0)
	/// Proof: `Avn::Validators` (`max_values`: Some(1), `max_size`: Some(16386), added: 16881, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::EventsPendingChallenge` (r:1 w:1)
	/// Proof: `EthereumEvents::EventsPendingChallenge` (`max_values`: Some(1), `max_size`: Some(12481), added: 12976, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::QuorumFactor` (r:1 w:0)
	/// Proof: `EthereumEvents::QuorumFactor` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::Challenges` (r:1 w:0)
	/// Proof: `EthereumEvents::Challenges` (`max_values`: None, `max_size`: Some(401), added: 2876, mode: `MaxEncodedLen`)
	/// Storage: `Session::CurrentIndex` (r:1 w:0)
	/// Proof: `Session::CurrentIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Offences::Reports` (r:1 w:1)
	/// Proof: `Offences::Reports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Offences::ConcurrentReportsIndex` (r:1 w:1)
	/// Proof: `Offences::ConcurrentReportsIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `AvnOffenceHandler::ReportedOffenders` (r:1 w:1)
	/// Proof: `AvnOffenceHandler::ReportedOffenders` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `AvnOffenceHandler::SlashingEnabled` (r:1 w:0)
	/// Proof: `AvnOffenceHandler::SlashingEnabled` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::ProcessedEvents` (r:0 w:1)
	/// Proof: `EthereumEvents::ProcessedEvents` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
	/// The range of component `v` is `[1, 10]`.
	/// The range of component `e` is `[1, 9]`.
	fn process_event_without_successful_challenge(v: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1036 + e * (122 ±0) + v * (64 ±0)`
		//  Estimated: `17871 + e * (122 ±0) + v * (64 ±0)`
		// Minimum execution time: 144_034_000 picoseconds.
		Weight::from_parts(144_360_204, 17871)
			// Standard Error: 19_280
			.saturating_add(Weight::from_parts(306_943, 0).saturating_mul(v.into()))
			// Standard Error: 21_404
			.saturating_add(Weight::from_parts(1_387_237, 0).saturating_mul(e.into()))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(Weight::from_parts(0, 122).saturating_mul(e.into()))
			.saturating_add(Weight::from_parts(0, 64).saturating_mul(v.into()))
	}
	/// Storage: `Avn::Validators` (r:1 w:0)
	/// Proof: `Avn::Validators` (`max_values`: Some(1), `max_size`: Some(16386), added: 16881, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::EventsPendingChallenge` (r:1 w:0)
	/// Proof: `EthereumEvents::EventsPendingChallenge` (`max_values`: Some(1), `max_size`: Some(12481), added: 12976, mode: `MaxEncodedLen`)
	/// Storage: `EthereumEvents::Challenges` (r:1 w:1)
	/// Proof: `EthereumEvents::Challenges` (`max_values`: None, `max_size`: Some(401), added: 2876, mode: `MaxEncodedLen`)
	/// The range of component `v` is `[3, 10]`.
	/// The range of component `e` is `[1, 9]`.
	/// The range of component `c` is `[1, 9]`.
	fn challenge_event(v: u32, e: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `479 + c * (32 ±0) + e * (122 ±0) + v * (64 ±0)`
		//  Estimated: `17871`
		// Minimum execution time: 51_561_000 picoseconds.
		Weight::from_parts(51_764_683, 17871)
			// Standard Error: 5_257
			.saturating_add(Weight::from_parts(88_239, 0).saturating_mul(v.into()))
			// Standard Error: 4_578
			.saturating_add(Weight::from_parts(296_510, 0).saturating_mul(e.into()))
			// Standard Error: 4_578
			.saturating_add(Weight::from_parts(42_613, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `EthereumEvents::EventChallengePeriod` (r:0 w:1)
	/// Proof: `EthereumEvents::EventChallengePeriod` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_event_challenge_period() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 15_291_000 picoseconds.
		Weight::from_parts(16_001_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
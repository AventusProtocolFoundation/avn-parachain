// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_ethereum_events
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-08, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-4-12`, CPU: `AMD EPYC 7R32`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./avn-parachain-collator
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --template
// .maintain/frame-weight-template.hbs
// --pallet
// pallet_ethereum-events
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ethereum_events_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_ethereum_events.
pub trait WeightInfo {
	fn add_validator_log(u: u32, e: u32, ) -> Weight;
	fn add_lift_log(u: u32, e: u32, ) -> Weight;
	fn add_ethereum_log(u: u32, e: u32, ) -> Weight;
	fn signed_add_ethereum_log(u: u32, e: u32, ) -> Weight;
	fn set_ethereum_contract_map_storage() -> Weight;
	fn set_ethereum_contract_storage() -> Weight;
	fn submit_checkevent_result(v: u32, u: u32, ) -> Weight;
	fn process_event_with_successful_challenge(v: u32, e: u32, ) -> Weight;
	fn process_event_without_successful_challenge(v: u32, e: u32, ) -> Weight;
	fn challenge_event(v: u32, e: u32, c: u32, ) -> Weight;
	fn set_event_challenge_period() -> Weight;
}

/// Weights for pallet_ethereum_events using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: EthereumEvents ProcessedEvents (r:1 w:0)
	// Storage: EthereumEvents UncheckedEvents (r:1 w:1)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:0)
	// Storage: EthereumEvents TotalIngresses (r:1 w:1)
	// Storage: EthereumEvents ValidatorManagerContractAddress (r:1 w:0)
	/// The range of component `u` is `[1, 5]`.
	/// The range of component `e` is `[1, 5]`.
	fn add_validator_log(u: u32, e: u32, ) -> Weight {
		(Weight::from_ref_time(32_987_000))
			// Standard Error: 33_000
			.saturating_add(Weight::from_ref_time(136_000).saturating_mul(u as u64))
			// Standard Error: 33_000
			.saturating_add(Weight::from_ref_time(363_000).saturating_mul(e as u64))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: EthereumEvents ProcessedEvents (r:1 w:0)
	// Storage: EthereumEvents UncheckedEvents (r:1 w:1)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:0)
	// Storage: EthereumEvents TotalIngresses (r:1 w:1)
	// Storage: EthereumEvents LiftingContractAddress (r:1 w:0)
	/// The range of component `u` is `[1, 5]`.
	/// The range of component `e` is `[1, 5]`.
	fn add_lift_log(u: u32, e: u32, ) -> Weight {
		(Weight::from_ref_time(32_887_000))
			// Standard Error: 27_000
			.saturating_add(Weight::from_ref_time(117_000).saturating_mul(u as u64))
			// Standard Error: 27_000
			.saturating_add(Weight::from_ref_time(412_000).saturating_mul(e as u64))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: EthereumEvents ProcessedEvents (r:1 w:0)
	// Storage: EthereumEvents UncheckedEvents (r:1 w:1)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:0)
	// Storage: EthereumEvents TotalIngresses (r:1 w:1)
	/// The range of component `u` is `[1, 5]`.
	/// The range of component `e` is `[1, 5]`.
	fn add_ethereum_log(u: u32, e: u32, ) -> Weight {
		(Weight::from_ref_time(29_753_000))
			// Standard Error: 35_000
			.saturating_add(Weight::from_ref_time(170_000).saturating_mul(u as u64))
			// Standard Error: 35_000
			.saturating_add(Weight::from_ref_time(389_000).saturating_mul(e as u64))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: EthereumEvents ProxyNonces (r:1 w:1)
	// Storage: EthereumEvents ProcessedEvents (r:1 w:0)
	// Storage: EthereumEvents UncheckedEvents (r:1 w:1)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:0)
	// Storage: EthereumEvents TotalIngresses (r:1 w:1)
	/// The range of component `u` is `[1, 5]`.
	/// The range of component `e` is `[1, 5]`.
	fn signed_add_ethereum_log(u: u32, e: u32, ) -> Weight {
		(Weight::from_ref_time(108_641_000))
			// Standard Error: 64_000
			.saturating_add(Weight::from_ref_time(214_000).saturating_mul(u as u64))
			// Standard Error: 64_000
			.saturating_add(Weight::from_ref_time(540_000).saturating_mul(e as u64))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: EthereumEvents NftT1Contracts (r:0 w:1)
	fn set_ethereum_contract_map_storage() -> Weight {
		(Weight::from_ref_time(5_520_000))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: EthereumEvents ValidatorManagerContractAddress (r:0 w:1)
	fn set_ethereum_contract_storage() -> Weight {
		(Weight::from_ref_time(4_920_000))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Avn Validators (r:1 w:0)
	// Storage: EthereumEvents UncheckedEvents (r:1 w:1)
	// Storage: EthereumEvents EventChallengePeriod (r:1 w:0)
	// Storage: EthereumEvents QuorumFactor (r:1 w:0)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:1)
	/// The range of component `v` is `[1, 10]`.
	/// The range of component `u` is `[1, 5]`.
	fn submit_checkevent_result(v: u32, u: u32, ) -> Weight {
		(Weight::from_ref_time(36_690_000) )
			// Standard Error: 39_000
			.saturating_add(Weight::from_ref_time(339_000).saturating_mul(v as u64))
			// Standard Error: 101_000
			.saturating_add(Weight::from_ref_time(245_000).saturating_mul(u as u64))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Avn Validators (r:1 w:0)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:1)
	// Storage: EthereumEvents QuorumFactor (r:1 w:0)
	// Storage: EthereumEvents Challenges (r:1 w:0)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Offences Reports (r:1 w:1)
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: AvnOffenceHandler ReportedOffenders (r:1 w:1)
	// Storage: AvnOffenceHandler SlashingEnabled (r:1 w:0)
	// Storage: EthereumEvents ProcessedEvents (r:0 w:1)
	/// The range of component `v` is `[1, 10]`.
	/// The range of component `e` is `[1, 5]`.
	fn process_event_with_successful_challenge(v: u32, e: u32, ) -> Weight {
		(Weight::from_ref_time(90_694_000))
			// Standard Error: 48_000
			.saturating_add(Weight::from_ref_time(492_000).saturating_mul(v as u64))
			// Standard Error: 122_000
			.saturating_add(Weight::from_ref_time(1_352_000).saturating_mul(e as u64))
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Avn Validators (r:1 w:0)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:1)
	// Storage: EthereumEvents QuorumFactor (r:1 w:0)
	// Storage: EthereumEvents Challenges (r:1 w:0)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Offences Reports (r:1 w:1)
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: AvnOffenceHandler ReportedOffenders (r:1 w:1)
	// Storage: AvnOffenceHandler SlashingEnabled (r:1 w:0)
	// Storage: EthereumEvents ProcessedEvents (r:0 w:1)
	/// The range of component `v` is `[1, 10]`.
	/// The range of component `e` is `[1, 5]`.
	fn process_event_without_successful_challenge(v: u32, e: u32, ) -> Weight {
		(Weight::from_ref_time(89_650_000))
			// Standard Error: 48_000
			.saturating_add(Weight::from_ref_time(225_000).saturating_mul(v as u64))
			// Standard Error: 121_000
			.saturating_add(Weight::from_ref_time(1_423_000).saturating_mul(e as u64))
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Avn Validators (r:1 w:0)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:0)
	// Storage: EthereumEvents Challenges (r:1 w:1)
	/// The range of component `v` is `[3, 10]`.
	/// The range of component `e` is `[1, 5]`.
	/// The range of component `c` is `[1, 10]`.
	fn challenge_event(v: u32, e: u32, _c: u32, ) -> Weight {
		(Weight::from_ref_time(33_830_000))
			// Standard Error: 44_000
			.saturating_add(Weight::from_ref_time(188_000).saturating_mul(v as u64))
			// Standard Error: 87_000
			.saturating_add(Weight::from_ref_time(370_000).saturating_mul(e as u64))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: EthereumEvents EventChallengePeriod (r:0 w:1)
	fn set_event_challenge_period() -> Weight {
		(Weight::from_ref_time(15_192_000))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: EthereumEvents ProcessedEvents (r:1 w:0)
	// Storage: EthereumEvents UncheckedEvents (r:1 w:1)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:0)
	// Storage: EthereumEvents TotalIngresses (r:1 w:1)
	// Storage: EthereumEvents ValidatorManagerContractAddress (r:1 w:0)
	/// The range of component `u` is `[1, 5]`.
	/// The range of component `e` is `[1, 5]`.
	fn add_validator_log(u: u32, e: u32, ) -> Weight {
		(Weight::from_ref_time(32_987_000))
			// Standard Error: 33_000
			.saturating_add(Weight::from_ref_time(136_000).saturating_mul(u as u64))
			// Standard Error: 33_000
			.saturating_add(Weight::from_ref_time(363_000).saturating_mul(e as u64))
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: EthereumEvents ProcessedEvents (r:1 w:0)
	// Storage: EthereumEvents UncheckedEvents (r:1 w:1)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:0)
	// Storage: EthereumEvents TotalIngresses (r:1 w:1)
	// Storage: EthereumEvents LiftingContractAddress (r:1 w:0)
	/// The range of component `u` is `[1, 5]`.
	/// The range of component `e` is `[1, 5]`.
	fn add_lift_log(u: u32, e: u32, ) -> Weight {
		(Weight::from_ref_time(32_887_000))
			// Standard Error: 27_000
			.saturating_add(Weight::from_ref_time(117_000).saturating_mul(u as u64))
			// Standard Error: 27_000
			.saturating_add(Weight::from_ref_time(412_000).saturating_mul(e as u64))
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: EthereumEvents ProcessedEvents (r:1 w:0)
	// Storage: EthereumEvents UncheckedEvents (r:1 w:1)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:0)
	// Storage: EthereumEvents TotalIngresses (r:1 w:1)
	/// The range of component `u` is `[1, 5]`.
	/// The range of component `e` is `[1, 5]`.
	fn add_ethereum_log(u: u32, e: u32, ) -> Weight {
		(Weight::from_ref_time(29_753_000))
			// Standard Error: 35_000
			.saturating_add(Weight::from_ref_time(170_000).saturating_mul(u as u64))
			// Standard Error: 35_000
			.saturating_add(Weight::from_ref_time(389_000).saturating_mul(e as u64))
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: EthereumEvents ProxyNonces (r:1 w:1)
	// Storage: EthereumEvents ProcessedEvents (r:1 w:0)
	// Storage: EthereumEvents UncheckedEvents (r:1 w:1)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:0)
	// Storage: EthereumEvents TotalIngresses (r:1 w:1)
	/// The range of component `u` is `[1, 5]`.
	/// The range of component `e` is `[1, 5]`.
	fn signed_add_ethereum_log(u: u32, e: u32, ) -> Weight {
		(Weight::from_ref_time(108_641_000))
			// Standard Error: 64_000
			.saturating_add(Weight::from_ref_time(214_000).saturating_mul(u as u64))
			// Standard Error: 64_000
			.saturating_add(Weight::from_ref_time(540_000).saturating_mul(e as u64))
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: EthereumEvents NftT1Contracts (r:0 w:1)
	fn set_ethereum_contract_map_storage() -> Weight {
		(Weight::from_ref_time(5_520_000))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: EthereumEvents ValidatorManagerContractAddress (r:0 w:1)
	fn set_ethereum_contract_storage() -> Weight {
		(Weight::from_ref_time(4_920_000))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Avn Validators (r:1 w:0)
	// Storage: EthereumEvents UncheckedEvents (r:1 w:1)
	// Storage: EthereumEvents EventChallengePeriod (r:1 w:0)
	// Storage: EthereumEvents QuorumFactor (r:1 w:0)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:1)
	/// The range of component `v` is `[1, 10]`.
	/// The range of component `u` is `[1, 5]`.
	fn submit_checkevent_result(v: u32, u: u32, ) -> Weight {
		(Weight::from_ref_time(36_690_000))
			// Standard Error: 39_000
			.saturating_add(Weight::from_ref_time(339_000)).saturating_mul(v as u64)
			// Standard Error: 101_000
			.saturating_add(Weight::from_ref_time(245_000)).saturating_mul(u as u64)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Avn Validators (r:1 w:0)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:1)
	// Storage: EthereumEvents QuorumFactor (r:1 w:0)
	// Storage: EthereumEvents Challenges (r:1 w:0)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Offences Reports (r:1 w:1)
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: AvnOffenceHandler ReportedOffenders (r:1 w:1)
	// Storage: AvnOffenceHandler SlashingEnabled (r:1 w:0)
	// Storage: EthereumEvents ProcessedEvents (r:0 w:1)
	/// The range of component `v` is `[1, 10]`.
	/// The range of component `e` is `[1, 5]`.
	fn process_event_with_successful_challenge(v: u32, e: u32, ) -> Weight {
		(Weight::from_ref_time(90_694_000))
			// Standard Error: 48_000
			.saturating_add(Weight::from_ref_time(492_000).saturating_mul(v as u64))
			// Standard Error: 122_000
			.saturating_add(Weight::from_ref_time(1_352_000).saturating_mul(e as u64))
			.saturating_add(RocksDbWeight::get().reads(11))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	// Storage: Avn Validators (r:1 w:0)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:1)
	// Storage: EthereumEvents QuorumFactor (r:1 w:0)
	// Storage: EthereumEvents Challenges (r:1 w:0)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Offences Reports (r:1 w:1)
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: AvnOffenceHandler ReportedOffenders (r:1 w:1)
	// Storage: AvnOffenceHandler SlashingEnabled (r:1 w:0)
	// Storage: EthereumEvents ProcessedEvents (r:0 w:1)
	/// The range of component `v` is `[1, 10]`.
	/// The range of component `e` is `[1, 5]`.
	fn process_event_without_successful_challenge(v: u32, e: u32, ) -> Weight {
		(Weight::from_ref_time(89_650_000))
			// Standard Error: 48_000
			.saturating_add(Weight::from_ref_time(225_000 ).saturating_mul(v as u64))
			// Standard Error: 121_000
			.saturating_add(Weight::from_ref_time(1_423_000 ).saturating_mul(e as u64))
			.saturating_add(RocksDbWeight::get().reads(11 ))
			.saturating_add(RocksDbWeight::get().writes(6 ))
	}
	// Storage: Avn Validators (r:1 w:0)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:0)
	// Storage: EthereumEvents Challenges (r:1 w:1)
	/// The range of component `v` is `[3, 10]`.
	/// The range of component `e` is `[1, 5]`.
	/// The range of component `c` is `[1, 10]`.
	fn challenge_event(v: u32, e: u32, _c: u32, ) -> Weight {
		(Weight::from_ref_time(33_830_000))
			// Standard Error: 44_000
			.saturating_add(Weight::from_ref_time(188_000).saturating_mul(v as u64))
			// Standard Error: 87_000
			.saturating_add(Weight::from_ref_time(370_000).saturating_mul(e as u64))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: EthereumEvents EventChallengePeriod (r:0 w:1)
	fn set_event_challenge_period() -> Weight {
		(Weight::from_ref_time(15_192_000))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}
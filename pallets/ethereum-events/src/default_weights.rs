// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_ethereum_events
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-02-01, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-6-191`, CPU: `AMD EPYC 7R32`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./avn-parachain-collator
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --template
// frame-weight-template.hbs
// --pallet
// pallet_ethereum_events
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ethereum_events_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_ethereum_events.
pub trait WeightInfo {
	fn add_validator_log(u: u32, e: u32, ) -> Weight;
	fn add_lift_log(u: u32, e: u32, ) -> Weight;
	fn add_ethereum_log(u: u32, e: u32, ) -> Weight;
	fn signed_add_ethereum_log(u: u32, e: u32, ) -> Weight;
	fn set_nft_contract_map_storage() -> Weight;
	fn submit_checkevent_result(v: u32, u: u32, ) -> Weight;
	fn process_event_with_successful_challenge(v: u32, e: u32, ) -> Weight;
	fn process_event_without_successful_challenge(v: u32, e: u32, ) -> Weight;
	fn challenge_event(v: u32, e: u32, c: u32, ) -> Weight;
	fn set_event_challenge_period() -> Weight;
}

/// Weights for pallet_ethereum_events using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: EthereumEvents ProcessedEvents (r:1 w:0)
	// Storage: EthereumEvents UncheckedEvents (r:1 w:1)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:0)
	// Storage: EthereumEvents TotalIngresses (r:1 w:1)
	// Storage: Avn AvnBridgeContractAddress (r:1 w:0)
	/// The range of component `u` is `[1, 9]`.
	/// The range of component `e` is `[1, 9]`.
	fn add_validator_log(u: u32, e: u32, ) -> Weight {
		Weight::from_ref_time(37_271_293)
			// Standard Error: 5_934
			.saturating_add(Weight::from_ref_time(46_306).saturating_mul(u.into()))
			// Standard Error: 5_934
			.saturating_add(Weight::from_ref_time(280_718).saturating_mul(e.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: EthereumEvents ProcessedEvents (r:1 w:0)
	// Storage: EthereumEvents UncheckedEvents (r:1 w:1)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:0)
	// Storage: EthereumEvents TotalIngresses (r:1 w:1)
	// Storage: Avn AvnBridgeContractAddress (r:1 w:0)
	/// The range of component `u` is `[1, 9]`.
	/// The range of component `e` is `[1, 9]`.
	fn add_lift_log(u: u32, e: u32, ) -> Weight {
		Weight::from_ref_time(37_120_076)
			// Standard Error: 6_191
			.saturating_add(Weight::from_ref_time(77_674).saturating_mul(u.into()))
			// Standard Error: 6_191
			.saturating_add(Weight::from_ref_time(294_773).saturating_mul(e.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: EthereumEvents ProcessedEvents (r:1 w:0)
	// Storage: EthereumEvents UncheckedEvents (r:1 w:1)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:0)
	// Storage: EthereumEvents TotalIngresses (r:1 w:1)
	/// The range of component `u` is `[1, 9]`.
	/// The range of component `e` is `[1, 9]`.
	fn add_ethereum_log(u: u32, e: u32, ) -> Weight {
		Weight::from_ref_time(31_747_513)
			// Standard Error: 6_482
			.saturating_add(Weight::from_ref_time(70_535).saturating_mul(u.into()))
			// Standard Error: 6_482
			.saturating_add(Weight::from_ref_time(324_173).saturating_mul(e.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: EthereumEvents ProxyNonces (r:1 w:1)
	// Storage: EthereumEvents ProcessedEvents (r:1 w:0)
	// Storage: EthereumEvents UncheckedEvents (r:1 w:1)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:0)
	// Storage: EthereumEvents TotalIngresses (r:1 w:1)
	/// The range of component `u` is `[1, 9]`.
	/// The range of component `e` is `[1, 9]`.
	fn signed_add_ethereum_log(u: u32, e: u32, ) -> Weight {
		Weight::from_ref_time(181_981_609)
			// Standard Error: 11_684
			.saturating_add(Weight::from_ref_time(85_787).saturating_mul(u.into()))
			// Standard Error: 11_684
			.saturating_add(Weight::from_ref_time(332_721).saturating_mul(e.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: EthereumEvents NftT1Contracts (r:0 w:1)
	fn set_nft_contract_map_storage() -> Weight {
		Weight::from_ref_time(6_610_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Avn Validators (r:1 w:0)
	// Storage: EthereumEvents UncheckedEvents (r:1 w:1)
	// Storage: EthereumEvents EventChallengePeriod (r:1 w:0)
	// Storage: EthereumEvents QuorumFactor (r:1 w:0)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:1)
	/// The range of component `v` is `[1, 10]`.
	/// The range of component `u` is `[1, 9]`.
	fn submit_checkevent_result(v: u32, u: u32, ) -> Weight {
		Weight::from_ref_time(39_694_561)
			// Standard Error: 5_411
			.saturating_add(Weight::from_ref_time(130_872).saturating_mul(v.into()))
			// Standard Error: 6_007
			.saturating_add(Weight::from_ref_time(264_843).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Avn Validators (r:1 w:0)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:1)
	// Storage: EthereumEvents QuorumFactor (r:1 w:0)
	// Storage: EthereumEvents Challenges (r:1 w:0)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Offences Reports (r:1 w:1)
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: AvnOffenceHandler ReportedOffenders (r:1 w:1)
	// Storage: AvnOffenceHandler SlashingEnabled (r:1 w:0)
	// Storage: EthereumEvents ProcessedEvents (r:0 w:1)
	/// The range of component `v` is `[1, 10]`.
	/// The range of component `e` is `[1, 9]`.
	fn process_event_with_successful_challenge(v: u32, e: u32, ) -> Weight {
		Weight::from_ref_time(93_702_794)
			// Standard Error: 8_505
			.saturating_add(Weight::from_ref_time(164_695).saturating_mul(v.into()))
			// Standard Error: 9_442
			.saturating_add(Weight::from_ref_time(972_922).saturating_mul(e.into()))
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Avn Validators (r:1 w:0)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:1)
	// Storage: EthereumEvents QuorumFactor (r:1 w:0)
	// Storage: EthereumEvents Challenges (r:1 w:0)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Offences Reports (r:1 w:1)
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: AvnOffenceHandler ReportedOffenders (r:1 w:1)
	// Storage: AvnOffenceHandler SlashingEnabled (r:1 w:0)
	// Storage: EthereumEvents ProcessedEvents (r:0 w:1)
	/// The range of component `v` is `[1, 10]`.
	/// The range of component `e` is `[1, 9]`.
	fn process_event_without_successful_challenge(v: u32, e: u32, ) -> Weight {
		Weight::from_ref_time(91_534_173)
			// Standard Error: 9_321
			.saturating_add(Weight::from_ref_time(217_200).saturating_mul(v.into()))
			// Standard Error: 10_348
			.saturating_add(Weight::from_ref_time(929_028).saturating_mul(e.into()))
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Avn Validators (r:1 w:0)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:0)
	// Storage: EthereumEvents Challenges (r:1 w:1)
	/// The range of component `v` is `[3, 10]`.
	/// The range of component `e` is `[1, 9]`.
	/// The range of component `c` is `[1, 9]`.
	fn challenge_event(v: u32, e: u32, c: u32, ) -> Weight {
		Weight::from_ref_time(38_784_171)
			// Standard Error: 5_055
			.saturating_add(Weight::from_ref_time(101_663).saturating_mul(v.into()))
			// Standard Error: 4_402
			.saturating_add(Weight::from_ref_time(309_491).saturating_mul(e.into()))
			// Standard Error: 4_402
			.saturating_add(Weight::from_ref_time(115_397).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: EthereumEvents EventChallengePeriod (r:0 w:1)
	fn set_event_challenge_period() -> Weight {
		Weight::from_ref_time(16_380_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: EthereumEvents ProcessedEvents (r:1 w:0)
	// Storage: EthereumEvents UncheckedEvents (r:1 w:1)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:0)
	// Storage: EthereumEvents TotalIngresses (r:1 w:1)
	// Storage: Avn AvnBridgeContractAddress (r:1 w:0)
	/// The range of component `u` is `[1, 9]`.
	/// The range of component `e` is `[1, 9]`.
	fn add_validator_log(u: u32, e: u32, ) -> Weight {
		Weight::from_ref_time(37_271_293)
			// Standard Error: 5_934
			.saturating_add(Weight::from_ref_time(46_306).saturating_mul(u.into()))
			// Standard Error: 5_934
			.saturating_add(Weight::from_ref_time(280_718).saturating_mul(e.into()))
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: EthereumEvents ProcessedEvents (r:1 w:0)
	// Storage: EthereumEvents UncheckedEvents (r:1 w:1)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:0)
	// Storage: EthereumEvents TotalIngresses (r:1 w:1)
	// Storage: Avn AvnBridgeContractAddress (r:1 w:0)
	/// The range of component `u` is `[1, 9]`.
	/// The range of component `e` is `[1, 9]`.
	fn add_lift_log(u: u32, e: u32, ) -> Weight {
		Weight::from_ref_time(37_120_076)
			// Standard Error: 6_191
			.saturating_add(Weight::from_ref_time(77_674).saturating_mul(u.into()))
			// Standard Error: 6_191
			.saturating_add(Weight::from_ref_time(294_773).saturating_mul(e.into()))
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: EthereumEvents ProcessedEvents (r:1 w:0)
	// Storage: EthereumEvents UncheckedEvents (r:1 w:1)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:0)
	// Storage: EthereumEvents TotalIngresses (r:1 w:1)
	/// The range of component `u` is `[1, 9]`.
	/// The range of component `e` is `[1, 9]`.
	fn add_ethereum_log(u: u32, e: u32, ) -> Weight {
		Weight::from_ref_time(31_747_513)
			// Standard Error: 6_482
			.saturating_add(Weight::from_ref_time(70_535).saturating_mul(u.into()))
			// Standard Error: 6_482
			.saturating_add(Weight::from_ref_time(324_173).saturating_mul(e.into()))
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: EthereumEvents ProxyNonces (r:1 w:1)
	// Storage: EthereumEvents ProcessedEvents (r:1 w:0)
	// Storage: EthereumEvents UncheckedEvents (r:1 w:1)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:0)
	// Storage: EthereumEvents TotalIngresses (r:1 w:1)
	/// The range of component `u` is `[1, 9]`.
	/// The range of component `e` is `[1, 9]`.
	fn signed_add_ethereum_log(u: u32, e: u32, ) -> Weight {
		Weight::from_ref_time(181_981_609)
			// Standard Error: 11_684
			.saturating_add(Weight::from_ref_time(85_787).saturating_mul(u.into()))
			// Standard Error: 11_684
			.saturating_add(Weight::from_ref_time(332_721).saturating_mul(e.into()))
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: EthereumEvents NftT1Contracts (r:0 w:1)
	fn set_nft_contract_map_storage() -> Weight {
		Weight::from_ref_time(6_610_000)
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Avn Validators (r:1 w:0)
	// Storage: EthereumEvents UncheckedEvents (r:1 w:1)
	// Storage: EthereumEvents EventChallengePeriod (r:1 w:0)
	// Storage: EthereumEvents QuorumFactor (r:1 w:0)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:1)
	/// The range of component `v` is `[1, 10]`.
	/// The range of component `u` is `[1, 9]`.
	fn submit_checkevent_result(v: u32, u: u32, ) -> Weight {
		Weight::from_ref_time(39_694_561)
			// Standard Error: 5_411
			.saturating_add(Weight::from_ref_time(130_872).saturating_mul(v.into()))
			// Standard Error: 6_007
			.saturating_add(Weight::from_ref_time(264_843).saturating_mul(u.into()))
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Avn Validators (r:1 w:0)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:1)
	// Storage: EthereumEvents QuorumFactor (r:1 w:0)
	// Storage: EthereumEvents Challenges (r:1 w:0)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Offences Reports (r:1 w:1)
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: AvnOffenceHandler ReportedOffenders (r:1 w:1)
	// Storage: AvnOffenceHandler SlashingEnabled (r:1 w:0)
	// Storage: EthereumEvents ProcessedEvents (r:0 w:1)
	/// The range of component `v` is `[1, 10]`.
	/// The range of component `e` is `[1, 9]`.
	fn process_event_with_successful_challenge(v: u32, e: u32, ) -> Weight {
		Weight::from_ref_time(93_702_794)
			// Standard Error: 8_505
			.saturating_add(Weight::from_ref_time(164_695).saturating_mul(v.into()))
			// Standard Error: 9_442
			.saturating_add(Weight::from_ref_time(972_922).saturating_mul(e.into()))
			.saturating_add(RocksDbWeight::get().reads(11))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	// Storage: Avn Validators (r:1 w:0)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:1)
	// Storage: EthereumEvents QuorumFactor (r:1 w:0)
	// Storage: EthereumEvents Challenges (r:1 w:0)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Offences Reports (r:1 w:1)
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: AvnOffenceHandler ReportedOffenders (r:1 w:1)
	// Storage: AvnOffenceHandler SlashingEnabled (r:1 w:0)
	// Storage: EthereumEvents ProcessedEvents (r:0 w:1)
	/// The range of component `v` is `[1, 10]`.
	/// The range of component `e` is `[1, 9]`.
	fn process_event_without_successful_challenge(v: u32, e: u32, ) -> Weight {
		Weight::from_ref_time(91_534_173)
			// Standard Error: 9_321
			.saturating_add(Weight::from_ref_time(217_200).saturating_mul(v.into()))
			// Standard Error: 10_348
			.saturating_add(Weight::from_ref_time(929_028).saturating_mul(e.into()))
			.saturating_add(RocksDbWeight::get().reads(11))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	// Storage: Avn Validators (r:1 w:0)
	// Storage: EthereumEvents EventsPendingChallenge (r:1 w:0)
	// Storage: EthereumEvents Challenges (r:1 w:1)
	/// The range of component `v` is `[3, 10]`.
	/// The range of component `e` is `[1, 9]`.
	/// The range of component `c` is `[1, 9]`.
	fn challenge_event(v: u32, e: u32, c: u32, ) -> Weight {
		Weight::from_ref_time(38_784_171)
			// Standard Error: 5_055
			.saturating_add(Weight::from_ref_time(101_663).saturating_mul(v.into()))
			// Standard Error: 4_402
			.saturating_add(Weight::from_ref_time(309_491).saturating_mul(e.into()))
			// Standard Error: 4_402
			.saturating_add(Weight::from_ref_time(115_397).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: EthereumEvents EventChallengePeriod (r:0 w:1)
	fn set_event_challenge_period() -> Weight {
		Weight::from_ref_time(16_380_000)
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}
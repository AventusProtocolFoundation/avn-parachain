
//! Autogenerated weights for pallet_avn_anchor
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-02-15, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-16-102`, CPU: `Intel(R) Xeon(R) Platinum 8275CL CPU @ 3.00GHz`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./avn-parachain-collator
// benchmark
// pallet
// --chain
// dev
// --wasm-execution=compiled
// --template
// frame-weight-template.hbs
// --pallet
// pallet_avn_anchor
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// avn_anchor_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_avn_anchor.
pub trait WeightInfo {
	fn register_chain_handler() -> Weight;
    fn update_chain_handler() -> Weight;
    fn submit_checkpoint_with_identity() -> Weight;
	fn signed_register_chain_handler() -> Weight;
    fn signed_update_chain_handler() -> Weight;
    fn signed_submit_checkpoint_with_identity() -> Weight;
}



pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    fn register_chain_handler() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `149`
		//  Estimated: `1489`
		// Minimum execution time: 15_520_000 picoseconds.
		Weight::from_parts(15_945_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
    fn update_chain_handler() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `149`
		//  Estimated: `1489`
		// Minimum execution time: 15_520_000 picoseconds.
		Weight::from_parts(15_945_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
    fn submit_checkpoint_with_identity() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `149`
		//  Estimated: `1489`
		// Minimum execution time: 15_520_000 picoseconds.
		Weight::from_parts(15_945_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn signed_register_chain_handler() -> Weight {
        Weight::from_parts(20_000_000, 0)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }

    fn signed_update_chain_handler() -> Weight {
        Weight::from_parts(25_000_000, 0)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }

    fn signed_submit_checkpoint_with_identity() -> Weight {
        Weight::from_parts(30_000_000, 0)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
}

// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_ethereum_transactions
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-08, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-4-12`, CPU: `AMD EPYC 7R32`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./avn-parachain-collator
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --template
// .maintain/frame-weight-template.hbs
// --pallet
// pallet_ethereum-transactions
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ethereum_transactions_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_ethereum_transactions.
pub trait WeightInfo {
	fn set_transaction_id() -> Weight;
	fn unreserve_transaction() -> Weight;
	fn set_eth_tx_hash_for_dispatched_tx(v: u32, t: u32, ) -> Weight;
	fn set_publish_root_contract() -> Weight;
}

/// Weights for pallet_ethereum_transactions using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: EthereumTransactions Nonce (r:0 w:1)
	fn set_transaction_id() -> Weight {
		(Weight::from_ref_time(4_841_000))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: EthereumTransactions ReservedTransactions (r:1 w:2)
	fn unreserve_transaction() -> Weight {
		(Weight::from_ref_time(12_201_000))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Avn Validators (r:1 w:0)
	// Storage: EthereumTransactions Repository (r:1 w:1)
	// Storage: EthereumTransactions DispatchedAvnTxIds (r:1 w:0)
	/// The range of component `v` is `[1, 10]`.
	/// The range of component `t` is `[1, 1000000]`.
	fn set_eth_tx_hash_for_dispatched_tx(_v: u32, t: u32, ) -> Weight {
		(Weight::from_ref_time(1_046_680_000))
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(25_000).saturating_mul(t as u64))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: EthereumTransactions PublishRootContract (r:0 w:1)
	fn set_publish_root_contract() -> Weight {
		(Weight::from_ref_time(5_140_000))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: EthereumTransactions Nonce (r:0 w:1)
	fn set_transaction_id() -> Weight {
		(Weight::from_ref_time(4_841_000))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: EthereumTransactions ReservedTransactions (r:1 w:2)
	fn unreserve_transaction() -> Weight {
		(Weight::from_ref_time(12_201_000))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Avn Validators (r:1 w:0)
	// Storage: EthereumTransactions Repository (r:1 w:1)
	// Storage: EthereumTransactions DispatchedAvnTxIds (r:1 w:0)
	/// The range of component `v` is `[1, 10]`.
	/// The range of component `t` is `[1, 1000000]`.
	fn set_eth_tx_hash_for_dispatched_tx(_v: u32, t: u32, ) -> Weight {
		(Weight::from_ref_time(1_046_680_000))
			// Standard Error: 0
			.saturating_add(Weight::from_ref_time(25_000).saturating_mul(t as u64))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: EthereumTransactions PublishRootContract (r:0 w:1)
	fn set_publish_root_contract() -> Weight {
		(Weight::from_ref_time(5_140_000))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}
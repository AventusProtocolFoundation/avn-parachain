
//! Autogenerated weights for pallet_nft_manager
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2025-04-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-2-182`, CPU: `AMD EPYC 7R32`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./avn-parachain-collator
// benchmark
// pallet
// --chain
// dev
// --wasm-execution=compiled
// --template
// frame-weight-template.hbs
// --pallet
// pallet_nft_manager
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// nft_manager_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_nft_manager.
pub trait WeightInfo {
	fn mint_single_nft(r: u32, ) -> Weight;
	fn signed_mint_single_nft(r: u32, ) -> Weight;
	fn list_nft_open_for_sale() -> Weight;
	fn signed_list_nft_open_for_sale() -> Weight;
	fn signed_transfer_fiat_nft() -> Weight;
	fn signed_cancel_list_fiat_nft() -> Weight;
	fn proxy_signed_mint_single_nft(r: u32, ) -> Weight;
	fn proxy_signed_list_nft_open_for_sale() -> Weight;
	fn proxy_signed_transfer_fiat_nft() -> Weight;
	fn proxy_signed_cancel_list_fiat_nft() -> Weight;
	fn proxy_signed_create_batch(r: u32, ) -> Weight;
	fn proxy_signed_mint_batch_nft() -> Weight;
	fn proxy_signed_list_batch_for_sale() -> Weight;
	fn proxy_signed_end_batch_sale() -> Weight;
}

/// Weights for pallet_nft_manager using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `NftManager::UsedExternalReferences` (r:1 w:1)
	/// Proof: `NftManager::UsedExternalReferences` (`max_values`: None, `max_size`: Some(1043), added: 3518, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NextSingleNftUniqueId` (r:1 w:1)
	/// Proof: `NftManager::NextSingleNftUniqueId` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::Nfts` (r:1 w:1)
	/// Proof: `NftManager::Nfts` (`max_values`: None, `max_size`: Some(1179), added: 3654, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NextInfoId` (r:1 w:1)
	/// Proof: `NftManager::NextInfoId` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NftInfos` (r:0 w:1)
	/// Proof: `NftManager::NftInfos` (`max_values`: None, `max_size`: Some(559), added: 3034, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 16]`.
	fn mint_single_nft(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147`
		//  Estimated: `4644`
		// Minimum execution time: 33_291_000 picoseconds.
		Weight::from_parts(36_320_328, 4644)
			// Standard Error: 55_613
			.saturating_add(Weight::from_parts(388_896, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `NftManager::UsedExternalReferences` (r:1 w:1)
	/// Proof: `NftManager::UsedExternalReferences` (`max_values`: None, `max_size`: Some(1043), added: 3518, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NextSingleNftUniqueId` (r:1 w:1)
	/// Proof: `NftManager::NextSingleNftUniqueId` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::Nfts` (r:1 w:1)
	/// Proof: `NftManager::Nfts` (`max_values`: None, `max_size`: Some(1179), added: 3654, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NextInfoId` (r:1 w:1)
	/// Proof: `NftManager::NextInfoId` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NftInfos` (r:0 w:1)
	/// Proof: `NftManager::NftInfos` (`max_values`: None, `max_size`: Some(559), added: 3034, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 16]`.
	fn signed_mint_single_nft(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147`
		//  Estimated: `4644`
		// Minimum execution time: 173_764_000 picoseconds.
		Weight::from_parts(183_497_022, 4644)
			// Standard Error: 55_921
			.saturating_add(Weight::from_parts(59_489, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `NftManager::Nfts` (r:1 w:1)
	/// Proof: `NftManager::Nfts` (`max_values`: None, `max_size`: Some(1179), added: 3654, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NftOpenForSale` (r:1 w:1)
	/// Proof: `NftManager::NftOpenForSale` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	fn list_nft_open_for_sale() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `354`
		//  Estimated: `4644`
		// Minimum execution time: 25_501_000 picoseconds.
		Weight::from_parts(26_091_000, 4644)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `NftManager::Nfts` (r:1 w:1)
	/// Proof: `NftManager::Nfts` (`max_values`: None, `max_size`: Some(1179), added: 3654, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NftOpenForSale` (r:1 w:1)
	/// Proof: `NftManager::NftOpenForSale` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	fn signed_list_nft_open_for_sale() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `354`
		//  Estimated: `4644`
		// Minimum execution time: 167_864_000 picoseconds.
		Weight::from_parts(169_324_000, 4644)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `NftManager::NftOpenForSale` (r:1 w:1)
	/// Proof: `NftManager::NftOpenForSale` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::Nfts` (r:1 w:1)
	/// Proof: `NftManager::Nfts` (`max_values`: None, `max_size`: Some(1179), added: 3654, mode: `MaxEncodedLen`)
	fn signed_transfer_fiat_nft() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `425`
		//  Estimated: `4644`
		// Minimum execution time: 176_215_000 picoseconds.
		Weight::from_parts(181_895_000, 4644)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `NftManager::NftOpenForSale` (r:1 w:1)
	/// Proof: `NftManager::NftOpenForSale` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::Nfts` (r:1 w:1)
	/// Proof: `NftManager::Nfts` (`max_values`: None, `max_size`: Some(1179), added: 3654, mode: `MaxEncodedLen`)
	fn signed_cancel_list_fiat_nft() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `425`
		//  Estimated: `4644`
		// Minimum execution time: 173_814_000 picoseconds.
		Weight::from_parts(177_025_000, 4644)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `NftManager::UsedExternalReferences` (r:1 w:1)
	/// Proof: `NftManager::UsedExternalReferences` (`max_values`: None, `max_size`: Some(1043), added: 3518, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NextSingleNftUniqueId` (r:1 w:1)
	/// Proof: `NftManager::NextSingleNftUniqueId` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::Nfts` (r:1 w:1)
	/// Proof: `NftManager::Nfts` (`max_values`: None, `max_size`: Some(1179), added: 3654, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NextInfoId` (r:1 w:1)
	/// Proof: `NftManager::NextInfoId` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NftInfos` (r:0 w:1)
	/// Proof: `NftManager::NftInfos` (`max_values`: None, `max_size`: Some(559), added: 3034, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 16]`.
	fn proxy_signed_mint_single_nft(_r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147`
		//  Estimated: `4644`
		// Minimum execution time: 185_154_000 picoseconds.
		Weight::from_parts(203_661_319, 4644)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `NftManager::Nfts` (r:1 w:1)
	/// Proof: `NftManager::Nfts` (`max_values`: None, `max_size`: Some(1179), added: 3654, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NftOpenForSale` (r:1 w:1)
	/// Proof: `NftManager::NftOpenForSale` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	fn proxy_signed_list_nft_open_for_sale() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `354`
		//  Estimated: `4644`
		// Minimum execution time: 178_094_000 picoseconds.
		Weight::from_parts(179_244_000, 4644)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `NftManager::NftOpenForSale` (r:1 w:1)
	/// Proof: `NftManager::NftOpenForSale` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::Nfts` (r:1 w:1)
	/// Proof: `NftManager::Nfts` (`max_values`: None, `max_size`: Some(1179), added: 3654, mode: `MaxEncodedLen`)
	fn proxy_signed_transfer_fiat_nft() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `425`
		//  Estimated: `4644`
		// Minimum execution time: 184_901_000 picoseconds.
		Weight::from_parts(187_971_000, 4644)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `NftManager::NftOpenForSale` (r:1 w:1)
	/// Proof: `NftManager::NftOpenForSale` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::Nfts` (r:1 w:1)
	/// Proof: `NftManager::Nfts` (`max_values`: None, `max_size`: Some(1179), added: 3654, mode: `MaxEncodedLen`)
	fn proxy_signed_cancel_list_fiat_nft() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `425`
		//  Estimated: `4644`
		// Minimum execution time: 185_051_000 picoseconds.
		Weight::from_parts(187_812_000, 4644)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `NftManager::BatchNonces` (r:1 w:1)
	/// Proof: `NftManager::BatchNonces` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NextSingleNftUniqueId` (r:1 w:1)
	/// Proof: `NftManager::NextSingleNftUniqueId` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::BatchInfoId` (r:1 w:1)
	/// Proof: `NftManager::BatchInfoId` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NextInfoId` (r:1 w:1)
	/// Proof: `NftManager::NextInfoId` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NftInfos` (r:0 w:1)
	/// Proof: `NftManager::NftInfos` (`max_values`: None, `max_size`: Some(559), added: 3034, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 16384]`.
	fn proxy_signed_create_batch(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147`
		//  Estimated: `3545`
		// Minimum execution time: 192_845_000 picoseconds.
		Weight::from_parts(198_654_025, 3545)
			// Standard Error: 48
			.saturating_add(Weight::from_parts(71, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `NftManager::BatchInfoId` (r:1 w:0)
	/// Proof: `NftManager::BatchInfoId` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::BatchOpenForSale` (r:1 w:0)
	/// Proof: `NftManager::BatchOpenForSale` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NftInfos` (r:1 w:0)
	/// Proof: `NftManager::NftInfos` (`max_values`: None, `max_size`: Some(559), added: 3034, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NftBatches` (r:1 w:1)
	/// Proof: `NftManager::NftBatches` (`max_values`: None, `max_size`: Some(524340), added: 526815, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::UsedExternalReferences` (r:1 w:1)
	/// Proof: `NftManager::UsedExternalReferences` (`max_values`: None, `max_size`: Some(1043), added: 3518, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::Nfts` (r:1 w:1)
	/// Proof: `NftManager::Nfts` (`max_values`: None, `max_size`: Some(1179), added: 3654, mode: `MaxEncodedLen`)
	fn proxy_signed_mint_batch_nft() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `945`
		//  Estimated: `527805`
		// Minimum execution time: 224_655_000 picoseconds.
		Weight::from_parts(242_966_000, 527805)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `NftManager::BatchInfoId` (r:1 w:0)
	/// Proof: `NftManager::BatchInfoId` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::BatchNonces` (r:1 w:1)
	/// Proof: `NftManager::BatchNonces` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NftInfos` (r:1 w:0)
	/// Proof: `NftManager::NftInfos` (`max_values`: None, `max_size`: Some(559), added: 3034, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NftBatches` (r:1 w:0)
	/// Proof: `NftManager::NftBatches` (`max_values`: None, `max_size`: Some(524340), added: 526815, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::BatchOpenForSale` (r:1 w:1)
	/// Proof: `NftManager::BatchOpenForSale` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	fn proxy_signed_list_batch_for_sale() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `915`
		//  Estimated: `527805`
		// Minimum execution time: 189_724_000 picoseconds.
		Weight::from_parts(191_895_000, 527805)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `NftManager::BatchInfoId` (r:1 w:0)
	/// Proof: `NftManager::BatchInfoId` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::BatchOpenForSale` (r:1 w:1)
	/// Proof: `NftManager::BatchOpenForSale` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::BatchNonces` (r:1 w:1)
	/// Proof: `NftManager::BatchNonces` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NftInfos` (r:1 w:0)
	/// Proof: `NftManager::NftInfos` (`max_values`: None, `max_size`: Some(559), added: 3034, mode: `MaxEncodedLen`)
	fn proxy_signed_end_batch_sale() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `989`
		//  Estimated: `4024`
		// Minimum execution time: 195_765_000 picoseconds.
		Weight::from_parts(207_095_000, 4024)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `NftManager::UsedExternalReferences` (r:1 w:1)
	/// Proof: `NftManager::UsedExternalReferences` (`max_values`: None, `max_size`: Some(1043), added: 3518, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NextSingleNftUniqueId` (r:1 w:1)
	/// Proof: `NftManager::NextSingleNftUniqueId` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::Nfts` (r:1 w:1)
	/// Proof: `NftManager::Nfts` (`max_values`: None, `max_size`: Some(1179), added: 3654, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NextInfoId` (r:1 w:1)
	/// Proof: `NftManager::NextInfoId` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NftInfos` (r:0 w:1)
	/// Proof: `NftManager::NftInfos` (`max_values`: None, `max_size`: Some(559), added: 3034, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 16]`.
	fn mint_single_nft(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147`
		//  Estimated: `4644`
		// Minimum execution time: 33_291_000 picoseconds.
		Weight::from_parts(36_320_328, 4644)
			// Standard Error: 55_613
			.saturating_add(Weight::from_parts(388_896, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `NftManager::UsedExternalReferences` (r:1 w:1)
	/// Proof: `NftManager::UsedExternalReferences` (`max_values`: None, `max_size`: Some(1043), added: 3518, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NextSingleNftUniqueId` (r:1 w:1)
	/// Proof: `NftManager::NextSingleNftUniqueId` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::Nfts` (r:1 w:1)
	/// Proof: `NftManager::Nfts` (`max_values`: None, `max_size`: Some(1179), added: 3654, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NextInfoId` (r:1 w:1)
	/// Proof: `NftManager::NextInfoId` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NftInfos` (r:0 w:1)
	/// Proof: `NftManager::NftInfos` (`max_values`: None, `max_size`: Some(559), added: 3034, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 16]`.
	fn signed_mint_single_nft(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147`
		//  Estimated: `4644`
		// Minimum execution time: 173_764_000 picoseconds.
		Weight::from_parts(183_497_022, 4644)
			// Standard Error: 55_921
			.saturating_add(Weight::from_parts(59_489, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `NftManager::Nfts` (r:1 w:1)
	/// Proof: `NftManager::Nfts` (`max_values`: None, `max_size`: Some(1179), added: 3654, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NftOpenForSale` (r:1 w:1)
	/// Proof: `NftManager::NftOpenForSale` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	fn list_nft_open_for_sale() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `354`
		//  Estimated: `4644`
		// Minimum execution time: 25_501_000 picoseconds.
		Weight::from_parts(26_091_000, 4644)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `NftManager::Nfts` (r:1 w:1)
	/// Proof: `NftManager::Nfts` (`max_values`: None, `max_size`: Some(1179), added: 3654, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NftOpenForSale` (r:1 w:1)
	/// Proof: `NftManager::NftOpenForSale` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	fn signed_list_nft_open_for_sale() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `354`
		//  Estimated: `4644`
		// Minimum execution time: 167_864_000 picoseconds.
		Weight::from_parts(169_324_000, 4644)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `NftManager::NftOpenForSale` (r:1 w:1)
	/// Proof: `NftManager::NftOpenForSale` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::Nfts` (r:1 w:1)
	/// Proof: `NftManager::Nfts` (`max_values`: None, `max_size`: Some(1179), added: 3654, mode: `MaxEncodedLen`)
	fn signed_transfer_fiat_nft() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `425`
		//  Estimated: `4644`
		// Minimum execution time: 176_215_000 picoseconds.
		Weight::from_parts(181_895_000, 4644)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `NftManager::NftOpenForSale` (r:1 w:1)
	/// Proof: `NftManager::NftOpenForSale` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::Nfts` (r:1 w:1)
	/// Proof: `NftManager::Nfts` (`max_values`: None, `max_size`: Some(1179), added: 3654, mode: `MaxEncodedLen`)
	fn signed_cancel_list_fiat_nft() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `425`
		//  Estimated: `4644`
		// Minimum execution time: 173_814_000 picoseconds.
		Weight::from_parts(177_025_000, 4644)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `NftManager::UsedExternalReferences` (r:1 w:1)
	/// Proof: `NftManager::UsedExternalReferences` (`max_values`: None, `max_size`: Some(1043), added: 3518, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NextSingleNftUniqueId` (r:1 w:1)
	/// Proof: `NftManager::NextSingleNftUniqueId` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::Nfts` (r:1 w:1)
	/// Proof: `NftManager::Nfts` (`max_values`: None, `max_size`: Some(1179), added: 3654, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NextInfoId` (r:1 w:1)
	/// Proof: `NftManager::NextInfoId` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NftInfos` (r:0 w:1)
	/// Proof: `NftManager::NftInfos` (`max_values`: None, `max_size`: Some(559), added: 3034, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 16]`.
	fn proxy_signed_mint_single_nft(_r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147`
		//  Estimated: `4644`
		// Minimum execution time: 185_154_000 picoseconds.
		Weight::from_parts(203_661_319, 4644)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `NftManager::Nfts` (r:1 w:1)
	/// Proof: `NftManager::Nfts` (`max_values`: None, `max_size`: Some(1179), added: 3654, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NftOpenForSale` (r:1 w:1)
	/// Proof: `NftManager::NftOpenForSale` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	fn proxy_signed_list_nft_open_for_sale() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `354`
		//  Estimated: `4644`
		// Minimum execution time: 178_094_000 picoseconds.
		Weight::from_parts(179_244_000, 4644)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `NftManager::NftOpenForSale` (r:1 w:1)
	/// Proof: `NftManager::NftOpenForSale` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::Nfts` (r:1 w:1)
	/// Proof: `NftManager::Nfts` (`max_values`: None, `max_size`: Some(1179), added: 3654, mode: `MaxEncodedLen`)
	fn proxy_signed_transfer_fiat_nft() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `425`
		//  Estimated: `4644`
		// Minimum execution time: 184_901_000 picoseconds.
		Weight::from_parts(187_971_000, 4644)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `NftManager::NftOpenForSale` (r:1 w:1)
	/// Proof: `NftManager::NftOpenForSale` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::Nfts` (r:1 w:1)
	/// Proof: `NftManager::Nfts` (`max_values`: None, `max_size`: Some(1179), added: 3654, mode: `MaxEncodedLen`)
	fn proxy_signed_cancel_list_fiat_nft() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `425`
		//  Estimated: `4644`
		// Minimum execution time: 185_051_000 picoseconds.
		Weight::from_parts(187_812_000, 4644)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `NftManager::BatchNonces` (r:1 w:1)
	/// Proof: `NftManager::BatchNonces` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NextSingleNftUniqueId` (r:1 w:1)
	/// Proof: `NftManager::NextSingleNftUniqueId` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::BatchInfoId` (r:1 w:1)
	/// Proof: `NftManager::BatchInfoId` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NextInfoId` (r:1 w:1)
	/// Proof: `NftManager::NextInfoId` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NftInfos` (r:0 w:1)
	/// Proof: `NftManager::NftInfos` (`max_values`: None, `max_size`: Some(559), added: 3034, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 16384]`.
	fn proxy_signed_create_batch(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147`
		//  Estimated: `3545`
		// Minimum execution time: 192_845_000 picoseconds.
		Weight::from_parts(198_654_025, 3545)
			// Standard Error: 48
			.saturating_add(Weight::from_parts(71, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `NftManager::BatchInfoId` (r:1 w:0)
	/// Proof: `NftManager::BatchInfoId` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::BatchOpenForSale` (r:1 w:0)
	/// Proof: `NftManager::BatchOpenForSale` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NftInfos` (r:1 w:0)
	/// Proof: `NftManager::NftInfos` (`max_values`: None, `max_size`: Some(559), added: 3034, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NftBatches` (r:1 w:1)
	/// Proof: `NftManager::NftBatches` (`max_values`: None, `max_size`: Some(524340), added: 526815, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::UsedExternalReferences` (r:1 w:1)
	/// Proof: `NftManager::UsedExternalReferences` (`max_values`: None, `max_size`: Some(1043), added: 3518, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::Nfts` (r:1 w:1)
	/// Proof: `NftManager::Nfts` (`max_values`: None, `max_size`: Some(1179), added: 3654, mode: `MaxEncodedLen`)
	fn proxy_signed_mint_batch_nft() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `945`
		//  Estimated: `527805`
		// Minimum execution time: 224_655_000 picoseconds.
		Weight::from_parts(242_966_000, 527805)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `NftManager::BatchInfoId` (r:1 w:0)
	/// Proof: `NftManager::BatchInfoId` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::BatchNonces` (r:1 w:1)
	/// Proof: `NftManager::BatchNonces` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NftInfos` (r:1 w:0)
	/// Proof: `NftManager::NftInfos` (`max_values`: None, `max_size`: Some(559), added: 3034, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NftBatches` (r:1 w:0)
	/// Proof: `NftManager::NftBatches` (`max_values`: None, `max_size`: Some(524340), added: 526815, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::BatchOpenForSale` (r:1 w:1)
	/// Proof: `NftManager::BatchOpenForSale` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	fn proxy_signed_list_batch_for_sale() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `915`
		//  Estimated: `527805`
		// Minimum execution time: 189_724_000 picoseconds.
		Weight::from_parts(191_895_000, 527805)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `NftManager::BatchInfoId` (r:1 w:0)
	/// Proof: `NftManager::BatchInfoId` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::BatchOpenForSale` (r:1 w:1)
	/// Proof: `NftManager::BatchOpenForSale` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::BatchNonces` (r:1 w:1)
	/// Proof: `NftManager::BatchNonces` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `NftManager::NftInfos` (r:1 w:0)
	/// Proof: `NftManager::NftInfos` (`max_values`: None, `max_size`: Some(559), added: 3034, mode: `MaxEncodedLen`)
	fn proxy_signed_end_batch_sale() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `989`
		//  Estimated: `4024`
		// Minimum execution time: 195_765_000 picoseconds.
		Weight::from_parts(207_095_000, 4024)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}

//! Autogenerated weights for pallet_validators_manager
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-02-15, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-16-102`, CPU: `Intel(R) Xeon(R) Platinum 8275CL CPU @ 3.00GHz`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./avn-parachain-collator
// benchmark
// pallet
// --chain
// dev
// --wasm-execution=compiled
// --template
// frame-weight-template.hbs
// --pallet
// pallet_validators_manager
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// validators-manager_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_validators_manager.
pub trait WeightInfo {
	fn add_collator() -> Weight;
	fn remove_validator(v: u32, ) -> Weight;
	fn rotate_validator_ethereum_key() -> Weight;
}

/// Weights for pallet_validators_manager using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `ValidatorsManager::ValidatorAccountIds` (r:1 w:1)
	/// Proof: `ValidatorsManager::ValidatorAccountIds` (`max_values`: Some(1), `max_size`: Some(8194), added: 8689, mode: `MaxEncodedLen`)
	/// Storage: `ValidatorsManager::EthereumPublicKeys` (r:1 w:1)
	/// Proof: `ValidatorsManager::EthereumPublicKeys` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: Some(4802), added: 5297, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MinCollatorStake` (r:1 w:0)
	/// Proof: `ParachainStaking::MinCollatorStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: Some(152), added: 2627, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::NominatorState` (r:1 w:0)
	/// Proof: `ParachainStaking::NominatorState` (`max_values`: None, `max_size`: Some(14506), added: 16981, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `EthBridge::NextTxId` (r:1 w:1)
	/// Proof: `EthBridge::NextTxId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `EthBridge::ActiveRequest` (r:1 w:1)
	/// Proof: `EthBridge::ActiveRequest` (`max_values`: Some(1), `max_size`: Some(20944), added: 21439, mode: `MaxEncodedLen`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `EthBridge::EthTxLifetimeSecs` (r:1 w:0)
	/// Proof: `EthBridge::EthTxLifetimeSecs` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Avn::Validators` (r:1 w:0)
	/// Proof: `Avn::Validators` (`max_values`: Some(1), `max_size`: Some(16386), added: 16881, mode: `MaxEncodedLen`)
	/// Storage: `ValidatorsManager::TotalIngresses` (r:1 w:1)
	/// Proof: `ValidatorsManager::TotalIngresses` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `ValidatorsManager::ValidatorActions` (r:0 w:1)
	/// Proof: `ValidatorsManager::ValidatorActions` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::BottomNominations` (r:0 w:1)
	/// Proof: `ParachainStaking::BottomNominations` (`max_values`: None, `max_size`: Some(14458), added: 16933, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopNominations` (r:0 w:1)
	/// Proof: `ParachainStaking::TopNominations` (`max_values`: None, `max_size`: Some(14458), added: 16933, mode: `MaxEncodedLen`)
	/// Storage: `AvnOffenceHandler::ReportedOffenders` (r:0 w:1)
	/// Proof: `AvnOffenceHandler::ReportedOffenders` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	fn add_collator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1691`
		//  Estimated: `22429`
		// Minimum execution time: 165_604_000 picoseconds.
		Weight::from_parts(166_901_000, 22429)
			.saturating_add(T::DbWeight::get().reads(17_u64))
			.saturating_add(T::DbWeight::get().writes(14_u64))
	}
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: Some(4802), added: 5297, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: Some(152), added: 2627, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Era` (r:1 w:0)
	/// Proof: `ParachainStaking::Era` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Delay` (r:1 w:0)
	/// Proof: `ParachainStaking::Delay` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ValidatorsManager::EthereumPublicKeys` (r:10 w:0)
	/// Proof: `ValidatorsManager::EthereumPublicKeys` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
	/// Storage: `ValidatorsManager::TotalIngresses` (r:1 w:1)
	/// Proof: `ValidatorsManager::TotalIngresses` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `ValidatorsManager::ValidatorAccountIds` (r:1 w:1)
	/// Proof: `ValidatorsManager::ValidatorAccountIds` (`max_values`: Some(1), `max_size`: Some(8194), added: 8689, mode: `MaxEncodedLen`)
	/// Storage: `ValidatorsManager::ValidatorActions` (r:1 w:1)
	/// Proof: `ValidatorsManager::ValidatorActions` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// Storage: `EthBridge::NextTxId` (r:1 w:1)
	/// Proof: `EthBridge::NextTxId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `EthBridge::ActiveRequest` (r:1 w:0)
	/// Proof: `EthBridge::ActiveRequest` (`max_values`: Some(1), `max_size`: Some(20944), added: 21439, mode: `MaxEncodedLen`)
	/// Storage: `EthBridge::RequestQueue` (r:1 w:1)
	/// Proof: `EthBridge::RequestQueue` (`max_values`: Some(1), `max_size`: Some(79002), added: 79497, mode: `MaxEncodedLen`)
	/// The range of component `v` is `[3, 10]`.
	fn remove_validator(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1485 + v * (338 ±0)`
		//  Estimated: `80487 + v * (1839 ±15)`
		// Minimum execution time: 133_284_000 picoseconds.
		Weight::from_parts(113_437_766, 80487)
			// Standard Error: 30_078
			.saturating_add(Weight::from_parts(6_493_850, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(v.into())))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(Weight::from_parts(0, 1839).saturating_mul(v.into()))
	}
	/// Storage: `ValidatorsManager::EthereumPublicKeys` (r:2 w:2)
	/// Proof: `ValidatorsManager::EthereumPublicKeys` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
	fn rotate_validator_ethereum_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `310`
		//  Estimated: `6102`
		// Minimum execution time: 29_402_000 picoseconds.
		Weight::from_parts(30_043_000, 6102)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `ValidatorsManager::ValidatorAccountIds` (r:1 w:1)
	/// Proof: `ValidatorsManager::ValidatorAccountIds` (`max_values`: Some(1), `max_size`: Some(8194), added: 8689, mode: `MaxEncodedLen`)
	/// Storage: `ValidatorsManager::EthereumPublicKeys` (r:1 w:1)
	/// Proof: `ValidatorsManager::EthereumPublicKeys` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: Some(4802), added: 5297, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::MinCollatorStake` (r:1 w:0)
	/// Proof: `ParachainStaking::MinCollatorStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: Some(152), added: 2627, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::NominatorState` (r:1 w:0)
	/// Proof: `ParachainStaking::NominatorState` (`max_values`: None, `max_size`: Some(14506), added: 16981, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `EthBridge::NextTxId` (r:1 w:1)
	/// Proof: `EthBridge::NextTxId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `EthBridge::ActiveRequest` (r:1 w:1)
	/// Proof: `EthBridge::ActiveRequest` (`max_values`: Some(1), `max_size`: Some(20944), added: 21439, mode: `MaxEncodedLen`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `EthBridge::EthTxLifetimeSecs` (r:1 w:0)
	/// Proof: `EthBridge::EthTxLifetimeSecs` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Avn::Validators` (r:1 w:0)
	/// Proof: `Avn::Validators` (`max_values`: Some(1), `max_size`: Some(16386), added: 16881, mode: `MaxEncodedLen`)
	/// Storage: `ValidatorsManager::TotalIngresses` (r:1 w:1)
	/// Proof: `ValidatorsManager::TotalIngresses` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `ValidatorsManager::ValidatorActions` (r:0 w:1)
	/// Proof: `ValidatorsManager::ValidatorActions` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::BottomNominations` (r:0 w:1)
	/// Proof: `ParachainStaking::BottomNominations` (`max_values`: None, `max_size`: Some(14458), added: 16933, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopNominations` (r:0 w:1)
	/// Proof: `ParachainStaking::TopNominations` (`max_values`: None, `max_size`: Some(14458), added: 16933, mode: `MaxEncodedLen`)
	/// Storage: `AvnOffenceHandler::ReportedOffenders` (r:0 w:1)
	/// Proof: `AvnOffenceHandler::ReportedOffenders` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	fn add_collator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1691`
		//  Estimated: `22429`
		// Minimum execution time: 165_604_000 picoseconds.
		Weight::from_parts(166_901_000, 22429)
			.saturating_add(RocksDbWeight::get().reads(17_u64))
			.saturating_add(RocksDbWeight::get().writes(14_u64))
	}
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: Some(4802), added: 5297, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: Some(152), added: 2627, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Era` (r:1 w:0)
	/// Proof: `ParachainStaking::Era` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Delay` (r:1 w:0)
	/// Proof: `ParachainStaking::Delay` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ValidatorsManager::EthereumPublicKeys` (r:10 w:0)
	/// Proof: `ValidatorsManager::EthereumPublicKeys` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
	/// Storage: `ValidatorsManager::TotalIngresses` (r:1 w:1)
	/// Proof: `ValidatorsManager::TotalIngresses` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `ValidatorsManager::ValidatorAccountIds` (r:1 w:1)
	/// Proof: `ValidatorsManager::ValidatorAccountIds` (`max_values`: Some(1), `max_size`: Some(8194), added: 8689, mode: `MaxEncodedLen`)
	/// Storage: `ValidatorsManager::ValidatorActions` (r:1 w:1)
	/// Proof: `ValidatorsManager::ValidatorActions` (`max_values`: None, `max_size`: Some(78), added: 2553, mode: `MaxEncodedLen`)
	/// Storage: `EthBridge::NextTxId` (r:1 w:1)
	/// Proof: `EthBridge::NextTxId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `EthBridge::ActiveRequest` (r:1 w:0)
	/// Proof: `EthBridge::ActiveRequest` (`max_values`: Some(1), `max_size`: Some(20944), added: 21439, mode: `MaxEncodedLen`)
	/// Storage: `EthBridge::RequestQueue` (r:1 w:1)
	/// Proof: `EthBridge::RequestQueue` (`max_values`: Some(1), `max_size`: Some(79002), added: 79497, mode: `MaxEncodedLen`)
	/// The range of component `v` is `[3, 10]`.
	fn remove_validator(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1485 + v * (338 ±0)`
		//  Estimated: `80487 + v * (1839 ±15)`
		// Minimum execution time: 133_284_000 picoseconds.
		Weight::from_parts(113_437_766, 80487)
			// Standard Error: 30_078
			.saturating_add(Weight::from_parts(6_493_850, 0).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(v.into())))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
			.saturating_add(Weight::from_parts(0, 1839).saturating_mul(v.into()))
	}
	/// Storage: `ValidatorsManager::EthereumPublicKeys` (r:2 w:2)
	/// Proof: `ValidatorsManager::EthereumPublicKeys` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
	fn rotate_validator_ethereum_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `310`
		//  Estimated: `6102`
		// Minimum execution time: 29_402_000 picoseconds.
		Weight::from_parts(30_043_000, 6102)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
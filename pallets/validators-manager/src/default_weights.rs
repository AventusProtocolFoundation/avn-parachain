// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_validators_manager
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-12-08, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-15-201`, CPU: `AMD EPYC 7R32`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./avn-parachain-collator
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --template
// frame-weight-template.hbs
// --pallet
// pallet_validators_manager
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// val_mgr_default_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_validators_manager.
pub trait WeightInfo {
	fn add_collator() -> Weight;
	fn remove_validator(v: u32, ) -> Weight;
}

/// Weights for pallet_validators_manager using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: ValidatorsManager ValidatorAccountIds (r:1 w:1)
	// Storage: ValidatorsManager EthereumPublicKeys (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking MinCollatorStake (r:1 w:0)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:0)
	// Storage: Session NextKeys (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: EthBridge NextTxId (r:1 w:1)
	// Storage: EthBridge ActiveRequest (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: EthBridge EthTxLifetimeSecs (r:1 w:0)
	// Storage: Avn Validators (r:1 w:0)
	// Storage: ValidatorsManager TotalIngresses (r:1 w:1)
	// Storage: ValidatorsManager ValidatorActions (r:0 w:1)
	// Storage: ParachainStaking BottomNominations (r:0 w:1)
	// Storage: ParachainStaking TopNominations (r:0 w:1)
	// Storage: AvnOffenceHandler ReportedOffenders (r:0 w:1)
	fn add_collator() -> Weight {
		Weight::from_ref_time(158_845_000)
			.saturating_add(T::DbWeight::get().reads(16))
			.saturating_add(T::DbWeight::get().writes(14))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	// Storage: ValidatorsManager EthereumPublicKeys (r:5 w:0)
	// Storage: ValidatorsManager TotalIngresses (r:1 w:1)
	// Storage: ValidatorsManager ValidatorAccountIds (r:1 w:1)
	// Storage: ValidatorsManager ValidatorActions (r:1 w:1)
	// Storage: EthBridge NextTxId (r:1 w:1)
	// Storage: EthBridge ActiveRequest (r:1 w:0)
	// Storage: EthBridge RequestQueue (r:1 w:1)
	/// The range of component `v` is `[3, 10]`.
	fn remove_validator(v: u32, ) -> Weight {
		Weight::from_ref_time(117_032_487)
			// Standard Error: 67_236
			.saturating_add(Weight::from_ref_time(9_409_136).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(12))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(v.into())))
			.saturating_add(T::DbWeight::get().writes(7))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: ValidatorsManager ValidatorAccountIds (r:1 w:1)
	// Storage: ValidatorsManager EthereumPublicKeys (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking MinCollatorStake (r:1 w:0)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:0)
	// Storage: Session NextKeys (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: EthBridge NextTxId (r:1 w:1)
	// Storage: EthBridge ActiveRequest (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: EthBridge EthTxLifetimeSecs (r:1 w:0)
	// Storage: Avn Validators (r:1 w:0)
	// Storage: ValidatorsManager TotalIngresses (r:1 w:1)
	// Storage: ValidatorsManager ValidatorActions (r:0 w:1)
	// Storage: ParachainStaking BottomNominations (r:0 w:1)
	// Storage: ParachainStaking TopNominations (r:0 w:1)
	// Storage: AvnOffenceHandler ReportedOffenders (r:0 w:1)
	fn add_collator() -> Weight {
		Weight::from_ref_time(158_845_000)
			.saturating_add(RocksDbWeight::get().reads(16))
			.saturating_add(RocksDbWeight::get().writes(14))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	// Storage: ValidatorsManager EthereumPublicKeys (r:5 w:0)
	// Storage: ValidatorsManager TotalIngresses (r:1 w:1)
	// Storage: ValidatorsManager ValidatorAccountIds (r:1 w:1)
	// Storage: ValidatorsManager ValidatorActions (r:1 w:1)
	// Storage: EthBridge NextTxId (r:1 w:1)
	// Storage: EthBridge ActiveRequest (r:1 w:0)
	// Storage: EthBridge RequestQueue (r:1 w:1)
	/// The range of component `v` is `[3, 10]`.
	fn remove_validator(v: u32, ) -> Weight {
		Weight::from_ref_time(117_032_487)
			// Standard Error: 67_236
			.saturating_add(Weight::from_ref_time(9_409_136).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads(12))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(v.into())))
			.saturating_add(RocksDbWeight::get().writes(7))
	}
}
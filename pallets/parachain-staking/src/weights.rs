// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-10-03, STEPS: `20`, REPEAT: 2, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `nahu-Precision-7560`, CPU: `11th Gen Intel(R) Core(TM) i7-11850H @ 2.50GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./avn-parachain-collator
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --template
// frame-weight-template.hbs
// --pallet
// pallet_parachain_staking
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ./parachain_stacking_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_parachain_staking.
pub trait WeightInfo {
	fn set_total_selected() -> Weight;
	fn set_blocks_per_era() -> Weight;
	fn join_candidates(x: u32, ) -> Weight;
	fn schedule_leave_candidates(x: u32, ) -> Weight;
	fn execute_leave_candidates(x: u32, ) -> Weight;
	fn cancel_leave_candidates(x: u32, ) -> Weight;
	fn go_offline() -> Weight;
	fn go_online() -> Weight;
	fn candidate_bond_extra() -> Weight;
	fn signed_candidate_bond_extra() -> Weight;
	fn schedule_candidate_unbond() -> Weight;
	fn signed_schedule_candidate_unbond() -> Weight;
	fn execute_candidate_unbond() -> Weight;
	fn signed_execute_candidate_unbond() -> Weight;
	fn cancel_candidate_unbond() -> Weight;
	fn nominate(x: u32, y: u32, ) -> Weight;
	fn signed_nominate(x: u32, y: u32, ) -> Weight;
	fn schedule_leave_nominators() -> Weight;
	fn signed_schedule_leave_nominators() -> Weight;
	fn execute_leave_nominators(x: u32, ) -> Weight;
	fn signed_execute_leave_nominators(x: u32, ) -> Weight;
	fn cancel_leave_nominators() -> Weight;
	fn schedule_revoke_nomination() -> Weight;
	fn signed_schedule_revoke_nomination() -> Weight;
	fn bond_extra() -> Weight;
	fn signed_bond_extra() -> Weight;
	fn schedule_nominator_unbond() -> Weight;
	fn signed_schedule_nominator_unbond() -> Weight;
	fn execute_revoke_nomination() -> Weight;
	fn execute_nominator_unbond() -> Weight;
	fn signed_execute_nominator_unbond() -> Weight;
	fn cancel_revoke_nomination() -> Weight;
	fn cancel_nominator_unbond() -> Weight;
	fn era_transition_on_initialize(x: u32, y: u32, ) -> Weight;
	fn pay_one_collator_reward(y: u32, ) -> Weight;
	fn base_on_initialize() -> Weight;
	fn select_top_candidates() -> Weight;
	fn note_author() -> Weight;
	fn set_admin_setting() -> Weight;
	fn approve_growth_without_end_voting(x: u32, ) -> Weight;
	fn approve_growth_with_end_voting(x: u32, ) -> Weight;
	fn reject_growth_without_end_voting(x: u32, ) -> Weight;
	fn reject_growth_with_end_voting(x: u32, o: u32, ) -> Weight;
	fn end_voting_period_with_rejected_valid_votes(o: u32, ) -> Weight;
	fn end_voting_period_with_approved_invalid_votes(o: u32, ) -> Weight;
}

/// Weights for pallet_parachain_staking using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: ParachainStaking TotalSelected (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	fn set_total_selected() -> Weight {
		Weight::from_ref_time(22_640_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: ParachainStaking Era (r:1 w:1)
	// Storage: ParachainStaking TotalSelected (r:1 w:0)
	fn set_blocks_per_era() -> Weight {
		Weight::from_ref_time(23_090_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:0)
	// Storage: ParachainStaking MinCollatorStake (r:1 w:0)
	// Storage: Session NextKeys (r:1 w:0)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: ParachainStaking BottomNominations (r:0 w:1)
	// Storage: ParachainStaking TopNominations (r:0 w:1)
	/// The range of component `x` is `[3, 100]`.
	fn join_candidates(x: u32, ) -> Weight {
		Weight::from_ref_time(75_088_874)
			// Standard Error: 4_075
			.saturating_add(Weight::from_ref_time(220_426).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// The range of component `x` is `[3, 100]`.
	fn schedule_leave_candidates(x: u32, ) -> Weight {
		Weight::from_ref_time(38_569_002)
			// Standard Error: 3_054
			.saturating_add(Weight::from_ref_time(160_137).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: Balances Locks (r:2 w:2)
	// Storage: System Account (r:2 w:2)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking BottomNominations (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	/// The range of component `x` is `[2, 350]`.
	fn execute_leave_candidates(x: u32, ) -> Weight {
		Weight::from_ref_time(110_482_000)
			// Standard Error: 80_636
			.saturating_add(Weight::from_ref_time(27_361_073).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(x.into())))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// The range of component `x` is `[3, 100]`.
	fn cancel_leave_candidates(x: u32, ) -> Weight {
		Weight::from_ref_time(34_128_406)
			// Standard Error: 3_034
			.saturating_add(Weight::from_ref_time(167_193).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	fn go_offline() -> Weight {
		Weight::from_ref_time(32_781_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	fn go_online() -> Weight {
		Weight::from_ref_time(32_671_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	fn candidate_bond_extra() -> Weight {
		Weight::from_ref_time(56_911_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	fn signed_candidate_bond_extra() -> Weight {
		Weight::from_ref_time(141_684_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking MinCollatorStake (r:1 w:0)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	fn schedule_candidate_unbond() -> Weight {
		Weight::from_ref_time(36_121_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking MinCollatorStake (r:1 w:0)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	fn signed_schedule_candidate_unbond() -> Weight {
		Weight::from_ref_time(118_233_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	fn execute_candidate_unbond() -> Weight {
		Weight::from_ref_time(65_172_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	fn signed_execute_candidate_unbond() -> Weight {
		Weight::from_ref_time(148_673_000)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	fn cancel_candidate_unbond() -> Weight {
		Weight::from_ref_time(27_190_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	/// The range of component `x` is `[3, 100]`.
	/// The range of component `y` is `[2, 300]`.
	fn nominate(x: u32, y: u32, ) -> Weight {
		Weight::from_ref_time(74_579_538)
			// Standard Error: 8_120
			.saturating_add(Weight::from_ref_time(405_643).saturating_mul(x.into()))
			// Standard Error: 2_664
			.saturating_add(Weight::from_ref_time(153_687).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking MinTotalNominatorStake (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:3 w:2)
	// Storage: ParachainStaking TopNominations (r:2 w:2)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	/// The range of component `x` is `[3, 100]`.
	/// The range of component `y` is `[2, 300]`.
	fn signed_nominate(x: u32, _y: u32, ) -> Weight {
		Weight::from_ref_time(18_275_633)
			// Standard Error: 61_445
			.saturating_add(Weight::from_ref_time(41_204_249).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(x.into())))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	fn schedule_leave_nominators() -> Weight {
		Weight::from_ref_time(36_371_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	fn signed_schedule_leave_nominators() -> Weight {
		Weight::from_ref_time(118_753_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	/// The range of component `x` is `[2, 100]`.
	fn execute_leave_nominators(x: u32, ) -> Weight {
		Weight::from_ref_time(87_702_000)
			// Standard Error: 38_561
			.saturating_add(Weight::from_ref_time(22_938_197).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(x.into())))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	/// The range of component `x` is `[2, 100]`.
	fn signed_execute_leave_nominators(x: u32, ) -> Weight {
		Weight::from_ref_time(84_079_272)
			// Standard Error: 33_868
			.saturating_add(Weight::from_ref_time(25_029_439).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(x.into())))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	fn cancel_leave_nominators() -> Weight {
		Weight::from_ref_time(34_751_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	fn schedule_revoke_nomination() -> Weight {
		Weight::from_ref_time(36_271_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	fn signed_schedule_revoke_nomination() -> Weight {
		Weight::from_ref_time(118_903_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:0)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	fn bond_extra() -> Weight {
		Weight::from_ref_time(76_132_000)
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	fn signed_bond_extra() -> Weight {
		Weight::from_ref_time(170_175_000)
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking MinTotalNominatorStake (r:1 w:0)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	fn schedule_nominator_unbond() -> Weight {
		Weight::from_ref_time(38_541_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking MinTotalNominatorStake (r:1 w:0)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	fn signed_schedule_nominator_unbond() -> Weight {
		Weight::from_ref_time(124_693_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	fn execute_revoke_nomination() -> Weight {
		Weight::from_ref_time(94_172_000)
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking MinTotalNominatorStake (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	fn execute_nominator_unbond() -> Weight {
		Weight::from_ref_time(87_152_000)
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking MinTotalNominatorStake (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	fn signed_execute_nominator_unbond() -> Weight {
		Weight::from_ref_time(174_184_000)
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	fn cancel_revoke_nomination() -> Weight {
		Weight::from_ref_time(32_771_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	fn cancel_nominator_unbond() -> Weight {
		Weight::from_ref_time(38_461_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: ParachainStaking Era (r:1 w:1)
	// Storage: ParachainStaking Points (r:1 w:0)
	// Storage: ParachainStaking Staked (r:1 w:2)
	// Storage: System Account (r:302 w:302)
	// Storage: ParachainStaking LockedEraPayout (r:1 w:1)
	// Storage: ParachainStaking AwardedPts (r:9 w:1)
	// Storage: ParachainStaking GrowthPeriod (r:1 w:0)
	// Storage: ParachainStaking LastTriggeredGrowthPeriod (r:1 w:1)
	// Storage: ParachainStaking Growth (r:1 w:2)
	// Storage: ParachainStaking ProcessedGrowthPeriods (r:1 w:0)
	// Storage: EthereumTransactions ReservedTransactions (r:1 w:1)
	// Storage: EthereumTransactions Nonce (r:1 w:1)
	// Storage: Avn Validators (r:1 w:0)
	// Storage: ParachainStaking TotalIngresses (r:1 w:1)
	// Storage: ParachainStaking VotingPeriod (r:1 w:0)
	// Storage: ParachainStaking CandidatePool (r:1 w:0)
	// Storage: ParachainStaking TotalSelected (r:1 w:0)
	// Storage: ParachainStaking MinCollatorStake (r:1 w:0)
	// Storage: ParachainStaking CandidateInfo (r:10 w:0)
	// Storage: ParachainStaking NominationScheduledRequests (r:10 w:0)
	// Storage: ParachainStaking TopNominations (r:10 w:0)
	// Storage: ParachainStaking Total (r:1 w:0)
	// Storage: ParachainStaking AtStake (r:1 w:11)
	// Storage: ParachainStaking SelectedCandidates (r:0 w:1)
	// Storage: ParachainStaking DelayedPayouts (r:0 w:1)
	/// The range of component `x` is `[8, 20]`.
	/// The range of component `y` is `[0, 30000]`.
	fn era_transition_on_initialize(x: u32, y: u32, ) -> Weight {
		Weight::from_ref_time(799_670_163)
			// Standard Error: 11_958_787
			.saturating_add(Weight::from_ref_time(139_781_746).saturating_mul(x.into()))
			// Standard Error: 5_042
			.saturating_add(Weight::from_ref_time(133_201).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(67))
			.saturating_add(T::DbWeight::get().reads((9_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(60))
			.saturating_add(T::DbWeight::get().writes((6_u64).saturating_mul(x.into())))
	}
	// Storage: ParachainStaking DelayedPayouts (r:1 w:0)
	// Storage: ParachainStaking Points (r:1 w:0)
	// Storage: ParachainStaking AwardedPts (r:2 w:1)
	// Storage: ParachainStaking AtStake (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: ParachainStaking LockedEraPayout (r:1 w:1)
	/// The range of component `y` is `[0, 300]`.
	fn pay_one_collator_reward(y: u32, ) -> Weight {
		Weight::from_ref_time(50_108_534)
			// Standard Error: 5_472
			.saturating_add(Weight::from_ref_time(18_727_227).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(y.into())))
	}
	// Storage: ParachainStaking Era (r:1 w:0)
	fn base_on_initialize() -> Weight {
		Weight::from_ref_time(6_360_000)
			.saturating_add(T::DbWeight::get().reads(1))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:0)
	// Storage: ParachainStaking TotalSelected (r:1 w:0)
	// Storage: ParachainStaking MinCollatorStake (r:1 w:0)
	// Storage: ParachainStaking CandidateInfo (r:20 w:0)
	// Storage: ParachainStaking NominationScheduledRequests (r:20 w:0)
	// Storage: ParachainStaking TopNominations (r:20 w:0)
	// Storage: ParachainStaking SelectedCandidates (r:0 w:1)
	// Storage: ParachainStaking AtStake (r:0 w:20)
	fn select_top_candidates() -> Weight {
		Weight::from_ref_time(349_529_000)
			.saturating_add(T::DbWeight::get().reads(63))
			.saturating_add(T::DbWeight::get().writes(21))
	}
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking AwardedPts (r:1 w:1)
	// Storage: ParachainStaking Points (r:1 w:1)
	// Storage: System BlockWeight (r:1 w:1)
	fn note_author() -> Weight {
		Weight::from_ref_time(16_601_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: ParachainStaking Delay (r:0 w:1)
	fn set_admin_setting() -> Weight {
		Weight::from_ref_time(15_981_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: ParachainStaking Growth (r:1 w:0)
	// Storage: Avn Validators (r:1 w:0)
	// Storage: ValidatorsManager EthereumPublicKeys (r:1 w:0)
	// Storage: ParachainStaking VotesRepository (r:1 w:1)
	// Storage: ParachainStaking PendingApproval (r:1 w:0)
	// Storage: AvnFinalityTracker LatestFinalisedBlock (r:1 w:0)
	/// The range of component `x` is `[3, 97]`.
	fn approve_growth_without_end_voting(x: u32, ) -> Weight {
		Weight::from_ref_time(93_801_279)
			// Standard Error: 61_166
			.saturating_add(Weight::from_ref_time(198_757).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: ParachainStaking Growth (r:1 w:1)
	// Storage: Avn Validators (r:1 w:0)
	// Storage: ValidatorsManager EthereumPublicKeys (r:1 w:0)
	// Storage: ParachainStaking VotesRepository (r:1 w:1)
	// Storage: ParachainStaking PendingApproval (r:1 w:1)
	// Storage: AvnFinalityTracker LatestFinalisedBlock (r:1 w:0)
	// Storage: EthereumTransactions ReservedTransactions (r:1 w:1)
	// Storage: EthereumTransactions Repository (r:1 w:1)
	// Storage: EthereumTransactions DispatchedAvnTxIds (r:1 w:1)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Storage: Offences Reports (r:1 w:1)
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: AvnOffenceHandler ReportedOffenders (r:1 w:1)
	// Storage: AvnOffenceHandler SlashingEnabled (r:1 w:0)
	/// The range of component `x` is `[4, 97]`.
	fn approve_growth_with_end_voting(x: u32, ) -> Weight {
		Weight::from_ref_time(149_898_899)
			// Standard Error: 142_502
			.saturating_add(Weight::from_ref_time(2_430_507).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(12))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(7))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x.into())))
	}
	// Storage: Avn Validators (r:1 w:0)
	// Storage: ParachainStaking VotesRepository (r:1 w:1)
	// Storage: ParachainStaking Growth (r:1 w:0)
	// Storage: ParachainStaking PendingApproval (r:1 w:0)
	// Storage: AvnFinalityTracker LatestFinalisedBlock (r:1 w:0)
	/// The range of component `x` is `[3, 97]`.
	fn reject_growth_without_end_voting(x: u32, ) -> Weight {
		Weight::from_ref_time(39_998_117)
			// Standard Error: 24_501
			.saturating_add(Weight::from_ref_time(186_334).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Avn Validators (r:1 w:0)
	// Storage: ParachainStaking VotesRepository (r:1 w:1)
	// Storage: ParachainStaking Growth (r:1 w:0)
	// Storage: ParachainStaking PendingApproval (r:1 w:1)
	// Storage: AvnFinalityTracker LatestFinalisedBlock (r:1 w:0)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Storage: Offences Reports (r:2 w:2)
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: AvnOffenceHandler ReportedOffenders (r:2 w:2)
	// Storage: AvnOffenceHandler SlashingEnabled (r:1 w:0)
	/// The range of component `x` is `[4, 97]`.
	/// The range of component `o` is `[1, 2]`.
	fn reject_growth_with_end_voting(x: u32, o: u32, ) -> Weight {
		Weight::from_ref_time(80_289_802)
			// Standard Error: 40_849
			.saturating_add(Weight::from_ref_time(338_748).saturating_mul(x.into()))
			// Standard Error: 2_773_519
			.saturating_add(Weight::from_ref_time(2_091_742).saturating_mul(o.into()))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(o.into())))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(o.into())))
	}
	// Storage: ParachainStaking VotesRepository (r:1 w:0)
	// Storage: ParachainStaking Growth (r:1 w:1)
	// Storage: ParachainStaking PendingApproval (r:1 w:1)
	// Storage: AvnFinalityTracker LatestFinalisedBlock (r:1 w:0)
	// Storage: EthereumTransactions ReservedTransactions (r:1 w:1)
	// Storage: Avn Validators (r:1 w:0)
	// Storage: EthereumTransactions Repository (r:1 w:1)
	// Storage: EthereumTransactions DispatchedAvnTxIds (r:1 w:1)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Storage: Offences Reports (r:1 w:1)
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: AvnOffenceHandler ReportedOffenders (r:1 w:1)
	// Storage: AvnOffenceHandler SlashingEnabled (r:1 w:0)
	/// The range of component `o` is `[1, 2]`.
	fn end_voting_period_with_rejected_valid_votes(o: u32, ) -> Weight {
		Weight::from_ref_time(125_765_600)
			.saturating_add(T::DbWeight::get().reads(12))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(o.into())))
			.saturating_add(T::DbWeight::get().writes(7))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(o.into())))
	}
	// Storage: ParachainStaking VotesRepository (r:1 w:0)
	// Storage: ParachainStaking Growth (r:1 w:0)
	// Storage: ParachainStaking PendingApproval (r:1 w:1)
	// Storage: AvnFinalityTracker LatestFinalisedBlock (r:1 w:0)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Storage: Avn Validators (r:1 w:0)
	// Storage: Offences Reports (r:1 w:1)
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: AvnOffenceHandler ReportedOffenders (r:1 w:1)
	// Storage: AvnOffenceHandler SlashingEnabled (r:1 w:0)
	/// The range of component `o` is `[1, 2]`.
	fn end_voting_period_with_approved_invalid_votes(o: u32, ) -> Weight {
		Weight::from_ref_time(88_032_800)
			// Standard Error: 3_644_138
			.saturating_add(Weight::from_ref_time(3_558_100).saturating_mul(o.into()))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(o.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(o.into())))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: ParachainStaking TotalSelected (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	fn set_total_selected() -> Weight {
		Weight::from_ref_time(22_640_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: ParachainStaking Era (r:1 w:1)
	// Storage: ParachainStaking TotalSelected (r:1 w:0)
	fn set_blocks_per_era() -> Weight {
		Weight::from_ref_time(23_090_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:0)
	// Storage: ParachainStaking MinCollatorStake (r:1 w:0)
	// Storage: Session NextKeys (r:1 w:0)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: ParachainStaking BottomNominations (r:0 w:1)
	// Storage: ParachainStaking TopNominations (r:0 w:1)
	/// The range of component `x` is `[3, 100]`.
	fn join_candidates(x: u32, ) -> Weight {
		Weight::from_ref_time(75_088_874)
			// Standard Error: 4_075
			.saturating_add(Weight::from_ref_time(220_426).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(8))
			.saturating_add(RocksDbWeight::get().writes(7))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// The range of component `x` is `[3, 100]`.
	fn schedule_leave_candidates(x: u32, ) -> Weight {
		Weight::from_ref_time(38_569_002)
			// Standard Error: 3_054
			.saturating_add(Weight::from_ref_time(160_137).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: Balances Locks (r:2 w:2)
	// Storage: System Account (r:2 w:2)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking BottomNominations (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	/// The range of component `x` is `[2, 350]`.
	fn execute_leave_candidates(x: u32, ) -> Weight {
		Weight::from_ref_time(110_482_000)
			// Standard Error: 80_636
			.saturating_add(Weight::from_ref_time(27_361_073).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().reads((3_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(4))
			.saturating_add(RocksDbWeight::get().writes((3_u64).saturating_mul(x.into())))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// The range of component `x` is `[3, 100]`.
	fn cancel_leave_candidates(x: u32, ) -> Weight {
		Weight::from_ref_time(34_128_406)
			// Standard Error: 3_034
			.saturating_add(Weight::from_ref_time(167_193).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	fn go_offline() -> Weight {
		Weight::from_ref_time(32_781_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	fn go_online() -> Weight {
		Weight::from_ref_time(32_671_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	fn candidate_bond_extra() -> Weight {
		Weight::from_ref_time(56_911_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(5))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	fn signed_candidate_bond_extra() -> Weight {
		Weight::from_ref_time(141_684_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking MinCollatorStake (r:1 w:0)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	fn schedule_candidate_unbond() -> Weight {
		Weight::from_ref_time(36_121_000)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking MinCollatorStake (r:1 w:0)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	fn signed_schedule_candidate_unbond() -> Weight {
		Weight::from_ref_time(118_233_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	fn execute_candidate_unbond() -> Weight {
		Weight::from_ref_time(65_172_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(5))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	fn signed_execute_candidate_unbond() -> Weight {
		Weight::from_ref_time(148_673_000)
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	fn cancel_candidate_unbond() -> Weight {
		Weight::from_ref_time(27_190_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	/// The range of component `x` is `[3, 100]`.
	/// The range of component `y` is `[2, 300]`.
	fn nominate(x: u32, y: u32, ) -> Weight {
		Weight::from_ref_time(74_579_538)
			// Standard Error: 8_120
			.saturating_add(Weight::from_ref_time(405_643).saturating_mul(x.into()))
			// Standard Error: 2_664
			.saturating_add(Weight::from_ref_time(153_687).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(7))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking MinTotalNominatorStake (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:3 w:2)
	// Storage: ParachainStaking TopNominations (r:2 w:2)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	/// The range of component `x` is `[3, 100]`.
	/// The range of component `y` is `[2, 300]`.
	fn signed_nominate(x: u32, _y: u32, ) -> Weight {
		Weight::from_ref_time(18_275_633)
			// Standard Error: 61_445
			.saturating_add(Weight::from_ref_time(41_204_249).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(4))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(x.into())))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	fn schedule_leave_nominators() -> Weight {
		Weight::from_ref_time(36_371_000)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	fn signed_schedule_leave_nominators() -> Weight {
		Weight::from_ref_time(118_753_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	/// The range of component `x` is `[2, 100]`.
	fn execute_leave_nominators(x: u32, ) -> Weight {
		Weight::from_ref_time(87_702_000)
			// Standard Error: 38_561
			.saturating_add(Weight::from_ref_time(22_938_197).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().reads((3_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(2))
			.saturating_add(RocksDbWeight::get().writes((3_u64).saturating_mul(x.into())))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	/// The range of component `x` is `[2, 100]`.
	fn signed_execute_leave_nominators(x: u32, ) -> Weight {
		Weight::from_ref_time(84_079_272)
			// Standard Error: 33_868
			.saturating_add(Weight::from_ref_time(25_029_439).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().reads((3_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
			.saturating_add(RocksDbWeight::get().writes((3_u64).saturating_mul(x.into())))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	fn cancel_leave_nominators() -> Weight {
		Weight::from_ref_time(34_751_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	fn schedule_revoke_nomination() -> Weight {
		Weight::from_ref_time(36_271_000)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	fn signed_schedule_revoke_nomination() -> Weight {
		Weight::from_ref_time(118_903_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:0)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	fn bond_extra() -> Weight {
		Weight::from_ref_time(76_132_000)
			.saturating_add(RocksDbWeight::get().reads(8))
			.saturating_add(RocksDbWeight::get().writes(7))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	fn signed_bond_extra() -> Weight {
		Weight::from_ref_time(170_175_000)
			.saturating_add(RocksDbWeight::get().reads(9))
			.saturating_add(RocksDbWeight::get().writes(8))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking MinTotalNominatorStake (r:1 w:0)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	fn schedule_nominator_unbond() -> Weight {
		Weight::from_ref_time(38_541_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking MinTotalNominatorStake (r:1 w:0)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	fn signed_schedule_nominator_unbond() -> Weight {
		Weight::from_ref_time(124_693_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	fn execute_revoke_nomination() -> Weight {
		Weight::from_ref_time(94_172_000)
			.saturating_add(RocksDbWeight::get().reads(9))
			.saturating_add(RocksDbWeight::get().writes(8))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking MinTotalNominatorStake (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	fn execute_nominator_unbond() -> Weight {
		Weight::from_ref_time(87_152_000)
			.saturating_add(RocksDbWeight::get().reads(10))
			.saturating_add(RocksDbWeight::get().writes(8))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking MinTotalNominatorStake (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	fn signed_execute_nominator_unbond() -> Weight {
		Weight::from_ref_time(174_184_000)
			.saturating_add(RocksDbWeight::get().reads(11))
			.saturating_add(RocksDbWeight::get().writes(9))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	fn cancel_revoke_nomination() -> Weight {
		Weight::from_ref_time(32_771_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	fn cancel_nominator_unbond() -> Weight {
		Weight::from_ref_time(38_461_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: ParachainStaking Era (r:1 w:1)
	// Storage: ParachainStaking Points (r:1 w:0)
	// Storage: ParachainStaking Staked (r:1 w:2)
	// Storage: System Account (r:302 w:302)
	// Storage: ParachainStaking LockedEraPayout (r:1 w:1)
	// Storage: ParachainStaking AwardedPts (r:9 w:1)
	// Storage: ParachainStaking GrowthPeriod (r:1 w:0)
	// Storage: ParachainStaking LastTriggeredGrowthPeriod (r:1 w:1)
	// Storage: ParachainStaking Growth (r:1 w:1)
	// Storage: ParachainStaking ProcessedGrowthPeriods (r:1 w:0)
	// Storage: EthereumTransactions ReservedTransactions (r:1 w:1)
	// Storage: EthereumTransactions Nonce (r:1 w:1)
	// Storage: Avn Validators (r:1 w:0)
	// Storage: ParachainStaking TotalIngresses (r:1 w:1)
	// Storage: ParachainStaking VotingPeriod (r:1 w:0)
	// Storage: ParachainStaking CandidatePool (r:1 w:0)
	// Storage: ParachainStaking TotalSelected (r:1 w:0)
	// Storage: ParachainStaking MinCollatorStake (r:1 w:0)
	// Storage: ParachainStaking CandidateInfo (r:10 w:0)
	// Storage: ParachainStaking NominationScheduledRequests (r:10 w:0)
	// Storage: ParachainStaking TopNominations (r:10 w:0)
	// Storage: ParachainStaking Total (r:1 w:0)
	// Storage: ParachainStaking AtStake (r:1 w:11)
	// Storage: ParachainStaking SelectedCandidates (r:0 w:1)
	// Storage: ParachainStaking DelayedPayouts (r:0 w:1)
	/// The range of component `x` is `[8, 20]`.
	/// The range of component `y` is `[0, 30000]`.
	fn era_transition_on_initialize(x: u32, y: u32, ) -> Weight {
		Weight::from_ref_time(799_670_163)
			// Standard Error: 11_958_787
			.saturating_add(Weight::from_ref_time(139_781_746).saturating_mul(x.into()))
			// Standard Error: 5_042
			.saturating_add(Weight::from_ref_time(133_201).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(67))
			.saturating_add(RocksDbWeight::get().reads((9_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(60))
			.saturating_add(RocksDbWeight::get().writes((6_u64).saturating_mul(x.into())))
	}
	// Storage: ParachainStaking DelayedPayouts (r:1 w:0)
	// Storage: ParachainStaking Points (r:1 w:0)
	// Storage: ParachainStaking AwardedPts (r:2 w:1)
	// Storage: ParachainStaking AtStake (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: ParachainStaking LockedEraPayout (r:1 w:1)
	/// The range of component `y` is `[0, 300]`.
	fn pay_one_collator_reward(y: u32, ) -> Weight {
		Weight::from_ref_time(50_108_534)
			// Standard Error: 5_472
			.saturating_add(Weight::from_ref_time(18_727_227).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(8))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(y.into())))
			.saturating_add(RocksDbWeight::get().writes(5))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(y.into())))
	}
	// Storage: ParachainStaking Era (r:1 w:0)
	fn base_on_initialize() -> Weight {
		Weight::from_ref_time(6_360_000)
			.saturating_add(RocksDbWeight::get().reads(1))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:0)
	// Storage: ParachainStaking TotalSelected (r:1 w:0)
	// Storage: ParachainStaking MinCollatorStake (r:1 w:0)
	// Storage: ParachainStaking CandidateInfo (r:20 w:0)
	// Storage: ParachainStaking NominationScheduledRequests (r:20 w:0)
	// Storage: ParachainStaking TopNominations (r:20 w:0)
	// Storage: ParachainStaking SelectedCandidates (r:0 w:1)
	// Storage: ParachainStaking AtStake (r:0 w:20)
	fn select_top_candidates() -> Weight {
		Weight::from_ref_time(349_529_000)
			.saturating_add(RocksDbWeight::get().reads(63))
			.saturating_add(RocksDbWeight::get().writes(21))
	}
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking AwardedPts (r:1 w:1)
	// Storage: ParachainStaking Points (r:1 w:1)
	// Storage: System BlockWeight (r:1 w:1)
	fn note_author() -> Weight {
		Weight::from_ref_time(16_601_000)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: ParachainStaking Delay (r:0 w:1)
	fn set_admin_setting() -> Weight {
		Weight::from_ref_time(15_981_000)
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: ParachainStaking Growth (r:1 w:0)
	// Storage: Avn Validators (r:1 w:0)
	// Storage: ValidatorsManager EthereumPublicKeys (r:1 w:0)
	// Storage: ParachainStaking VotesRepository (r:1 w:1)
	// Storage: ParachainStaking PendingApproval (r:1 w:0)
	// Storage: AvnFinalityTracker LatestFinalisedBlock (r:1 w:0)
	/// The range of component `x` is `[3, 97]`.
	fn approve_growth_without_end_voting(x: u32, ) -> Weight {
		Weight::from_ref_time(93_801_279)
			// Standard Error: 61_166
			.saturating_add(Weight::from_ref_time(198_757).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: ParachainStaking Growth (r:1 w:1)
	// Storage: Avn Validators (r:1 w:0)
	// Storage: ValidatorsManager EthereumPublicKeys (r:1 w:0)
	// Storage: ParachainStaking VotesRepository (r:1 w:1)
	// Storage: ParachainStaking PendingApproval (r:1 w:1)
	// Storage: AvnFinalityTracker LatestFinalisedBlock (r:1 w:0)
	// Storage: EthereumTransactions ReservedTransactions (r:1 w:1)
	// Storage: EthereumTransactions Repository (r:1 w:1)
	// Storage: EthereumTransactions DispatchedAvnTxIds (r:1 w:1)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Storage: Offences Reports (r:1 w:1)
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: AvnOffenceHandler ReportedOffenders (r:1 w:1)
	// Storage: AvnOffenceHandler SlashingEnabled (r:1 w:0)
	/// The range of component `x` is `[4, 97]`.
	fn approve_growth_with_end_voting(x: u32, ) -> Weight {
		Weight::from_ref_time(149_898_899)
			// Standard Error: 142_502
			.saturating_add(Weight::from_ref_time(2_430_507).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(12))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().writes(7))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(x.into())))
	}
	// Storage: Avn Validators (r:1 w:0)
	// Storage: ParachainStaking VotesRepository (r:1 w:1)
	// Storage: ParachainStaking Growth (r:1 w:0)
	// Storage: ParachainStaking PendingApproval (r:1 w:0)
	// Storage: AvnFinalityTracker LatestFinalisedBlock (r:1 w:0)
	/// The range of component `x` is `[3, 97]`.
	fn reject_growth_without_end_voting(x: u32, ) -> Weight {
		Weight::from_ref_time(39_998_117)
			// Standard Error: 24_501
			.saturating_add(Weight::from_ref_time(186_334).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Avn Validators (r:1 w:0)
	// Storage: ParachainStaking VotesRepository (r:1 w:1)
	// Storage: ParachainStaking Growth (r:1 w:0)
	// Storage: ParachainStaking PendingApproval (r:1 w:1)
	// Storage: AvnFinalityTracker LatestFinalisedBlock (r:1 w:0)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Storage: Offences Reports (r:2 w:2)
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: AvnOffenceHandler ReportedOffenders (r:2 w:2)
	// Storage: AvnOffenceHandler SlashingEnabled (r:1 w:0)
	/// The range of component `x` is `[4, 97]`.
	/// The range of component `o` is `[1, 2]`.
	fn reject_growth_with_end_voting(x: u32, o: u32, ) -> Weight {
		Weight::from_ref_time(80_289_802)
			// Standard Error: 40_849
			.saturating_add(Weight::from_ref_time(338_748).saturating_mul(x.into()))
			// Standard Error: 2_773_519
			.saturating_add(Weight::from_ref_time(2_091_742).saturating_mul(o.into()))
			.saturating_add(RocksDbWeight::get().reads(9))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(o.into())))
			.saturating_add(RocksDbWeight::get().writes(4))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(o.into())))
	}
	// Storage: ParachainStaking VotesRepository (r:1 w:0)
	// Storage: ParachainStaking Growth (r:1 w:1)
	// Storage: ParachainStaking PendingApproval (r:1 w:1)
	// Storage: AvnFinalityTracker LatestFinalisedBlock (r:1 w:0)
	// Storage: EthereumTransactions ReservedTransactions (r:1 w:1)
	// Storage: Avn Validators (r:1 w:0)
	// Storage: EthereumTransactions Repository (r:1 w:1)
	// Storage: EthereumTransactions DispatchedAvnTxIds (r:1 w:1)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Storage: Offences Reports (r:1 w:1)
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: AvnOffenceHandler ReportedOffenders (r:1 w:1)
	// Storage: AvnOffenceHandler SlashingEnabled (r:1 w:0)
	/// The range of component `o` is `[1, 2]`.
	fn end_voting_period_with_rejected_valid_votes(o: u32, ) -> Weight {
		Weight::from_ref_time(125_765_600)
			.saturating_add(RocksDbWeight::get().reads(12))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(o.into())))
			.saturating_add(RocksDbWeight::get().writes(7))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(o.into())))
	}
	// Storage: ParachainStaking VotesRepository (r:1 w:0)
	// Storage: ParachainStaking Growth (r:1 w:0)
	// Storage: ParachainStaking PendingApproval (r:1 w:1)
	// Storage: AvnFinalityTracker LatestFinalisedBlock (r:1 w:0)
	// Storage: Session CurrentIndex (r:1 w:0)
	// Storage: Avn Validators (r:1 w:0)
	// Storage: Offences Reports (r:1 w:1)
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: AvnOffenceHandler ReportedOffenders (r:1 w:1)
	// Storage: AvnOffenceHandler SlashingEnabled (r:1 w:0)
	/// The range of component `o` is `[1, 2]`.
	fn end_voting_period_with_approved_invalid_votes(o: u32, ) -> Weight {
		Weight::from_ref_time(88_032_800)
			// Standard Error: 3_644_138
			.saturating_add(Weight::from_ref_time(3_558_100).saturating_mul(o.into()))
			.saturating_add(RocksDbWeight::get().reads(9))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(o.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(o.into())))
	}
}